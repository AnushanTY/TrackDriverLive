/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pickme.events.trip.trip_accepted;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Body extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7623966652033815898L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Body\",\"namespace\":\"com.pickme.events.trip.trip_accepted\",\"fields\":[{\"name\":\"trip_id\",\"type\":\"int\"},{\"name\":\"driver_id\",\"type\":\"int\"},{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"location\",\"fields\":[{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"lat\",\"type\":\"float\"},{\"name\":\"lng\",\"type\":\"float\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Body> ENCODER =
      new BinaryMessageEncoder<Body>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Body> DECODER =
      new BinaryMessageDecoder<Body>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Body> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Body> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Body>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Body to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Body from a ByteBuffer. */
  public static Body fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int trip_id;
  @Deprecated public int driver_id;
  @Deprecated public com.pickme.events.trip.trip_accepted.location location;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Body() {}

  /**
   * All-args constructor.
   * @param trip_id The new value for trip_id
   * @param driver_id The new value for driver_id
   * @param location The new value for location
   */
  public Body(java.lang.Integer trip_id, java.lang.Integer driver_id, com.pickme.events.trip.trip_accepted.location location) {
    this.trip_id = trip_id;
    this.driver_id = driver_id;
    this.location = location;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return trip_id;
    case 1: return driver_id;
    case 2: return location;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: trip_id = (java.lang.Integer)value$; break;
    case 1: driver_id = (java.lang.Integer)value$; break;
    case 2: location = (com.pickme.events.trip.trip_accepted.location)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'trip_id' field.
   * @return The value of the 'trip_id' field.
   */
  public java.lang.Integer getTripId() {
    return trip_id;
  }

  /**
   * Sets the value of the 'trip_id' field.
   * @param value the value to set.
   */
  public void setTripId(java.lang.Integer value) {
    this.trip_id = value;
  }

  /**
   * Gets the value of the 'driver_id' field.
   * @return The value of the 'driver_id' field.
   */
  public java.lang.Integer getDriverId() {
    return driver_id;
  }

  /**
   * Sets the value of the 'driver_id' field.
   * @param value the value to set.
   */
  public void setDriverId(java.lang.Integer value) {
    this.driver_id = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public com.pickme.events.trip.trip_accepted.location getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(com.pickme.events.trip.trip_accepted.location value) {
    this.location = value;
  }

  /**
   * Creates a new Body RecordBuilder.
   * @return A new Body RecordBuilder
   */
  public static com.pickme.events.trip.trip_accepted.Body.Builder newBuilder() {
    return new com.pickme.events.trip.trip_accepted.Body.Builder();
  }

  /**
   * Creates a new Body RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Body RecordBuilder
   */
  public static com.pickme.events.trip.trip_accepted.Body.Builder newBuilder(com.pickme.events.trip.trip_accepted.Body.Builder other) {
    return new com.pickme.events.trip.trip_accepted.Body.Builder(other);
  }

  /**
   * Creates a new Body RecordBuilder by copying an existing Body instance.
   * @param other The existing instance to copy.
   * @return A new Body RecordBuilder
   */
  public static com.pickme.events.trip.trip_accepted.Body.Builder newBuilder(com.pickme.events.trip.trip_accepted.Body other) {
    return new com.pickme.events.trip.trip_accepted.Body.Builder(other);
  }

  /**
   * RecordBuilder for Body instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Body>
    implements org.apache.avro.data.RecordBuilder<Body> {

    private int trip_id;
    private int driver_id;
    private com.pickme.events.trip.trip_accepted.location location;
    private com.pickme.events.trip.trip_accepted.location.Builder locationBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pickme.events.trip.trip_accepted.Body.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.trip_id)) {
        this.trip_id = data().deepCopy(fields()[0].schema(), other.trip_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.driver_id)) {
        this.driver_id = data().deepCopy(fields()[1].schema(), other.driver_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = true;
      }
      if (other.hasLocationBuilder()) {
        this.locationBuilder = com.pickme.events.trip.trip_accepted.location.newBuilder(other.getLocationBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Body instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pickme.events.trip.trip_accepted.Body other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.trip_id)) {
        this.trip_id = data().deepCopy(fields()[0].schema(), other.trip_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.driver_id)) {
        this.driver_id = data().deepCopy(fields()[1].schema(), other.driver_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = true;
      }
      this.locationBuilder = null;
    }

    /**
      * Gets the value of the 'trip_id' field.
      * @return The value.
      */
    public java.lang.Integer getTripId() {
      return trip_id;
    }

    /**
      * Sets the value of the 'trip_id' field.
      * @param value The value of 'trip_id'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_accepted.Body.Builder setTripId(int value) {
      validate(fields()[0], value);
      this.trip_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'trip_id' field has been set.
      * @return True if the 'trip_id' field has been set, false otherwise.
      */
    public boolean hasTripId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'trip_id' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_accepted.Body.Builder clearTripId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'driver_id' field.
      * @return The value.
      */
    public java.lang.Integer getDriverId() {
      return driver_id;
    }

    /**
      * Sets the value of the 'driver_id' field.
      * @param value The value of 'driver_id'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_accepted.Body.Builder setDriverId(int value) {
      validate(fields()[1], value);
      this.driver_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'driver_id' field has been set.
      * @return True if the 'driver_id' field has been set, false otherwise.
      */
    public boolean hasDriverId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'driver_id' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_accepted.Body.Builder clearDriverId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_accepted.location getLocation() {
      return location;
    }

    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_accepted.Body.Builder setLocation(com.pickme.events.trip.trip_accepted.location value) {
      validate(fields()[2], value);
      this.locationBuilder = null;
      this.location = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'location' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_accepted.location.Builder getLocationBuilder() {
      if (locationBuilder == null) {
        if (hasLocation()) {
          setLocationBuilder(com.pickme.events.trip.trip_accepted.location.newBuilder(location));
        } else {
          setLocationBuilder(com.pickme.events.trip.trip_accepted.location.newBuilder());
        }
      }
      return locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'location' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_accepted.Body.Builder setLocationBuilder(com.pickme.events.trip.trip_accepted.location.Builder value) {
      clearLocation();
      locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'location' field has an active Builder instance
     * @return True if the 'location' field has an active Builder instance
     */
    public boolean hasLocationBuilder() {
      return locationBuilder != null;
    }

    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_accepted.Body.Builder clearLocation() {
      location = null;
      locationBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Body build() {
      try {
        Body record = new Body();
        record.trip_id = fieldSetFlags()[0] ? this.trip_id : (java.lang.Integer) defaultValue(fields()[0]);
        record.driver_id = fieldSetFlags()[1] ? this.driver_id : (java.lang.Integer) defaultValue(fields()[1]);
        if (locationBuilder != null) {
          record.location = this.locationBuilder.build();
        } else {
          record.location = fieldSetFlags()[2] ? this.location : (com.pickme.events.trip.trip_accepted.location) defaultValue(fields()[2]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Body>
    WRITER$ = (org.apache.avro.io.DatumWriter<Body>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Body>
    READER$ = (org.apache.avro.io.DatumReader<Body>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pickme.events.trip.trip_created;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FareDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6485437055222434410L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FareDetails\",\"namespace\":\"com.pickme.events.trip.trip_created\",\"fields\":[{\"name\":\"fare_type\",\"type\":\"string\"},{\"name\":\"min_km\",\"type\":\"float\"},{\"name\":\"min_fare\",\"type\":\"float\"},{\"name\":\"additional_km_fare\",\"type\":\"float\"},{\"name\":\"waiting_time_fare\",\"type\":\"float\"},{\"name\":\"free_waiting_time\",\"type\":\"int\"},{\"name\":\"night_fare\",\"type\":\"float\"},{\"name\":\"ride_hours\",\"type\":\"float\"},{\"name\":\"extra_ride_fare\",\"type\":\"float\"},{\"name\":\"driver_bata\",\"type\":\"float\"},{\"name\":\"trip_type\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FareDetails> ENCODER =
      new BinaryMessageEncoder<FareDetails>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FareDetails> DECODER =
      new BinaryMessageDecoder<FareDetails>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<FareDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<FareDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FareDetails>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this FareDetails to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a FareDetails from a ByteBuffer. */
  public static FareDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence fare_type;
  @Deprecated public float min_km;
  @Deprecated public float min_fare;
  @Deprecated public float additional_km_fare;
  @Deprecated public float waiting_time_fare;
  @Deprecated public int free_waiting_time;
  @Deprecated public float night_fare;
  @Deprecated public float ride_hours;
  @Deprecated public float extra_ride_fare;
  @Deprecated public float driver_bata;
  @Deprecated public int trip_type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FareDetails() {}

  /**
   * All-args constructor.
   * @param fare_type The new value for fare_type
   * @param min_km The new value for min_km
   * @param min_fare The new value for min_fare
   * @param additional_km_fare The new value for additional_km_fare
   * @param waiting_time_fare The new value for waiting_time_fare
   * @param free_waiting_time The new value for free_waiting_time
   * @param night_fare The new value for night_fare
   * @param ride_hours The new value for ride_hours
   * @param extra_ride_fare The new value for extra_ride_fare
   * @param driver_bata The new value for driver_bata
   * @param trip_type The new value for trip_type
   */
  public FareDetails(java.lang.CharSequence fare_type, java.lang.Float min_km, java.lang.Float min_fare, java.lang.Float additional_km_fare, java.lang.Float waiting_time_fare, java.lang.Integer free_waiting_time, java.lang.Float night_fare, java.lang.Float ride_hours, java.lang.Float extra_ride_fare, java.lang.Float driver_bata, java.lang.Integer trip_type) {
    this.fare_type = fare_type;
    this.min_km = min_km;
    this.min_fare = min_fare;
    this.additional_km_fare = additional_km_fare;
    this.waiting_time_fare = waiting_time_fare;
    this.free_waiting_time = free_waiting_time;
    this.night_fare = night_fare;
    this.ride_hours = ride_hours;
    this.extra_ride_fare = extra_ride_fare;
    this.driver_bata = driver_bata;
    this.trip_type = trip_type;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fare_type;
    case 1: return min_km;
    case 2: return min_fare;
    case 3: return additional_km_fare;
    case 4: return waiting_time_fare;
    case 5: return free_waiting_time;
    case 6: return night_fare;
    case 7: return ride_hours;
    case 8: return extra_ride_fare;
    case 9: return driver_bata;
    case 10: return trip_type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fare_type = (java.lang.CharSequence)value$; break;
    case 1: min_km = (java.lang.Float)value$; break;
    case 2: min_fare = (java.lang.Float)value$; break;
    case 3: additional_km_fare = (java.lang.Float)value$; break;
    case 4: waiting_time_fare = (java.lang.Float)value$; break;
    case 5: free_waiting_time = (java.lang.Integer)value$; break;
    case 6: night_fare = (java.lang.Float)value$; break;
    case 7: ride_hours = (java.lang.Float)value$; break;
    case 8: extra_ride_fare = (java.lang.Float)value$; break;
    case 9: driver_bata = (java.lang.Float)value$; break;
    case 10: trip_type = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fare_type' field.
   * @return The value of the 'fare_type' field.
   */
  public java.lang.CharSequence getFareType() {
    return fare_type;
  }

  /**
   * Sets the value of the 'fare_type' field.
   * @param value the value to set.
   */
  public void setFareType(java.lang.CharSequence value) {
    this.fare_type = value;
  }

  /**
   * Gets the value of the 'min_km' field.
   * @return The value of the 'min_km' field.
   */
  public java.lang.Float getMinKm() {
    return min_km;
  }

  /**
   * Sets the value of the 'min_km' field.
   * @param value the value to set.
   */
  public void setMinKm(java.lang.Float value) {
    this.min_km = value;
  }

  /**
   * Gets the value of the 'min_fare' field.
   * @return The value of the 'min_fare' field.
   */
  public java.lang.Float getMinFare() {
    return min_fare;
  }

  /**
   * Sets the value of the 'min_fare' field.
   * @param value the value to set.
   */
  public void setMinFare(java.lang.Float value) {
    this.min_fare = value;
  }

  /**
   * Gets the value of the 'additional_km_fare' field.
   * @return The value of the 'additional_km_fare' field.
   */
  public java.lang.Float getAdditionalKmFare() {
    return additional_km_fare;
  }

  /**
   * Sets the value of the 'additional_km_fare' field.
   * @param value the value to set.
   */
  public void setAdditionalKmFare(java.lang.Float value) {
    this.additional_km_fare = value;
  }

  /**
   * Gets the value of the 'waiting_time_fare' field.
   * @return The value of the 'waiting_time_fare' field.
   */
  public java.lang.Float getWaitingTimeFare() {
    return waiting_time_fare;
  }

  /**
   * Sets the value of the 'waiting_time_fare' field.
   * @param value the value to set.
   */
  public void setWaitingTimeFare(java.lang.Float value) {
    this.waiting_time_fare = value;
  }

  /**
   * Gets the value of the 'free_waiting_time' field.
   * @return The value of the 'free_waiting_time' field.
   */
  public java.lang.Integer getFreeWaitingTime() {
    return free_waiting_time;
  }

  /**
   * Sets the value of the 'free_waiting_time' field.
   * @param value the value to set.
   */
  public void setFreeWaitingTime(java.lang.Integer value) {
    this.free_waiting_time = value;
  }

  /**
   * Gets the value of the 'night_fare' field.
   * @return The value of the 'night_fare' field.
   */
  public java.lang.Float getNightFare() {
    return night_fare;
  }

  /**
   * Sets the value of the 'night_fare' field.
   * @param value the value to set.
   */
  public void setNightFare(java.lang.Float value) {
    this.night_fare = value;
  }

  /**
   * Gets the value of the 'ride_hours' field.
   * @return The value of the 'ride_hours' field.
   */
  public java.lang.Float getRideHours() {
    return ride_hours;
  }

  /**
   * Sets the value of the 'ride_hours' field.
   * @param value the value to set.
   */
  public void setRideHours(java.lang.Float value) {
    this.ride_hours = value;
  }

  /**
   * Gets the value of the 'extra_ride_fare' field.
   * @return The value of the 'extra_ride_fare' field.
   */
  public java.lang.Float getExtraRideFare() {
    return extra_ride_fare;
  }

  /**
   * Sets the value of the 'extra_ride_fare' field.
   * @param value the value to set.
   */
  public void setExtraRideFare(java.lang.Float value) {
    this.extra_ride_fare = value;
  }

  /**
   * Gets the value of the 'driver_bata' field.
   * @return The value of the 'driver_bata' field.
   */
  public java.lang.Float getDriverBata() {
    return driver_bata;
  }

  /**
   * Sets the value of the 'driver_bata' field.
   * @param value the value to set.
   */
  public void setDriverBata(java.lang.Float value) {
    this.driver_bata = value;
  }

  /**
   * Gets the value of the 'trip_type' field.
   * @return The value of the 'trip_type' field.
   */
  public java.lang.Integer getTripType() {
    return trip_type;
  }

  /**
   * Sets the value of the 'trip_type' field.
   * @param value the value to set.
   */
  public void setTripType(java.lang.Integer value) {
    this.trip_type = value;
  }

  /**
   * Creates a new FareDetails RecordBuilder.
   * @return A new FareDetails RecordBuilder
   */
  public static com.pickme.events.trip.trip_created.FareDetails.Builder newBuilder() {
    return new com.pickme.events.trip.trip_created.FareDetails.Builder();
  }

  /**
   * Creates a new FareDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FareDetails RecordBuilder
   */
  public static com.pickme.events.trip.trip_created.FareDetails.Builder newBuilder(com.pickme.events.trip.trip_created.FareDetails.Builder other) {
    return new com.pickme.events.trip.trip_created.FareDetails.Builder(other);
  }

  /**
   * Creates a new FareDetails RecordBuilder by copying an existing FareDetails instance.
   * @param other The existing instance to copy.
   * @return A new FareDetails RecordBuilder
   */
  public static com.pickme.events.trip.trip_created.FareDetails.Builder newBuilder(com.pickme.events.trip.trip_created.FareDetails other) {
    return new com.pickme.events.trip.trip_created.FareDetails.Builder(other);
  }

  /**
   * RecordBuilder for FareDetails instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FareDetails>
    implements org.apache.avro.data.RecordBuilder<FareDetails> {

    private java.lang.CharSequence fare_type;
    private float min_km;
    private float min_fare;
    private float additional_km_fare;
    private float waiting_time_fare;
    private int free_waiting_time;
    private float night_fare;
    private float ride_hours;
    private float extra_ride_fare;
    private float driver_bata;
    private int trip_type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pickme.events.trip.trip_created.FareDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fare_type)) {
        this.fare_type = data().deepCopy(fields()[0].schema(), other.fare_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.min_km)) {
        this.min_km = data().deepCopy(fields()[1].schema(), other.min_km);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.min_fare)) {
        this.min_fare = data().deepCopy(fields()[2].schema(), other.min_fare);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.additional_km_fare)) {
        this.additional_km_fare = data().deepCopy(fields()[3].schema(), other.additional_km_fare);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.waiting_time_fare)) {
        this.waiting_time_fare = data().deepCopy(fields()[4].schema(), other.waiting_time_fare);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.free_waiting_time)) {
        this.free_waiting_time = data().deepCopy(fields()[5].schema(), other.free_waiting_time);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.night_fare)) {
        this.night_fare = data().deepCopy(fields()[6].schema(), other.night_fare);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.ride_hours)) {
        this.ride_hours = data().deepCopy(fields()[7].schema(), other.ride_hours);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.extra_ride_fare)) {
        this.extra_ride_fare = data().deepCopy(fields()[8].schema(), other.extra_ride_fare);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.driver_bata)) {
        this.driver_bata = data().deepCopy(fields()[9].schema(), other.driver_bata);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.trip_type)) {
        this.trip_type = data().deepCopy(fields()[10].schema(), other.trip_type);
        fieldSetFlags()[10] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FareDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pickme.events.trip.trip_created.FareDetails other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.fare_type)) {
        this.fare_type = data().deepCopy(fields()[0].schema(), other.fare_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.min_km)) {
        this.min_km = data().deepCopy(fields()[1].schema(), other.min_km);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.min_fare)) {
        this.min_fare = data().deepCopy(fields()[2].schema(), other.min_fare);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.additional_km_fare)) {
        this.additional_km_fare = data().deepCopy(fields()[3].schema(), other.additional_km_fare);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.waiting_time_fare)) {
        this.waiting_time_fare = data().deepCopy(fields()[4].schema(), other.waiting_time_fare);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.free_waiting_time)) {
        this.free_waiting_time = data().deepCopy(fields()[5].schema(), other.free_waiting_time);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.night_fare)) {
        this.night_fare = data().deepCopy(fields()[6].schema(), other.night_fare);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.ride_hours)) {
        this.ride_hours = data().deepCopy(fields()[7].schema(), other.ride_hours);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.extra_ride_fare)) {
        this.extra_ride_fare = data().deepCopy(fields()[8].schema(), other.extra_ride_fare);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.driver_bata)) {
        this.driver_bata = data().deepCopy(fields()[9].schema(), other.driver_bata);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.trip_type)) {
        this.trip_type = data().deepCopy(fields()[10].schema(), other.trip_type);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'fare_type' field.
      * @return The value.
      */
    public java.lang.CharSequence getFareType() {
      return fare_type;
    }

    /**
      * Sets the value of the 'fare_type' field.
      * @param value The value of 'fare_type'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder setFareType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.fare_type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'fare_type' field has been set.
      * @return True if the 'fare_type' field has been set, false otherwise.
      */
    public boolean hasFareType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'fare_type' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder clearFareType() {
      fare_type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'min_km' field.
      * @return The value.
      */
    public java.lang.Float getMinKm() {
      return min_km;
    }

    /**
      * Sets the value of the 'min_km' field.
      * @param value The value of 'min_km'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder setMinKm(float value) {
      validate(fields()[1], value);
      this.min_km = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'min_km' field has been set.
      * @return True if the 'min_km' field has been set, false otherwise.
      */
    public boolean hasMinKm() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'min_km' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder clearMinKm() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'min_fare' field.
      * @return The value.
      */
    public java.lang.Float getMinFare() {
      return min_fare;
    }

    /**
      * Sets the value of the 'min_fare' field.
      * @param value The value of 'min_fare'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder setMinFare(float value) {
      validate(fields()[2], value);
      this.min_fare = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'min_fare' field has been set.
      * @return True if the 'min_fare' field has been set, false otherwise.
      */
    public boolean hasMinFare() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'min_fare' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder clearMinFare() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'additional_km_fare' field.
      * @return The value.
      */
    public java.lang.Float getAdditionalKmFare() {
      return additional_km_fare;
    }

    /**
      * Sets the value of the 'additional_km_fare' field.
      * @param value The value of 'additional_km_fare'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder setAdditionalKmFare(float value) {
      validate(fields()[3], value);
      this.additional_km_fare = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'additional_km_fare' field has been set.
      * @return True if the 'additional_km_fare' field has been set, false otherwise.
      */
    public boolean hasAdditionalKmFare() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'additional_km_fare' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder clearAdditionalKmFare() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'waiting_time_fare' field.
      * @return The value.
      */
    public java.lang.Float getWaitingTimeFare() {
      return waiting_time_fare;
    }

    /**
      * Sets the value of the 'waiting_time_fare' field.
      * @param value The value of 'waiting_time_fare'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder setWaitingTimeFare(float value) {
      validate(fields()[4], value);
      this.waiting_time_fare = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'waiting_time_fare' field has been set.
      * @return True if the 'waiting_time_fare' field has been set, false otherwise.
      */
    public boolean hasWaitingTimeFare() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'waiting_time_fare' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder clearWaitingTimeFare() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'free_waiting_time' field.
      * @return The value.
      */
    public java.lang.Integer getFreeWaitingTime() {
      return free_waiting_time;
    }

    /**
      * Sets the value of the 'free_waiting_time' field.
      * @param value The value of 'free_waiting_time'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder setFreeWaitingTime(int value) {
      validate(fields()[5], value);
      this.free_waiting_time = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'free_waiting_time' field has been set.
      * @return True if the 'free_waiting_time' field has been set, false otherwise.
      */
    public boolean hasFreeWaitingTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'free_waiting_time' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder clearFreeWaitingTime() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'night_fare' field.
      * @return The value.
      */
    public java.lang.Float getNightFare() {
      return night_fare;
    }

    /**
      * Sets the value of the 'night_fare' field.
      * @param value The value of 'night_fare'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder setNightFare(float value) {
      validate(fields()[6], value);
      this.night_fare = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'night_fare' field has been set.
      * @return True if the 'night_fare' field has been set, false otherwise.
      */
    public boolean hasNightFare() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'night_fare' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder clearNightFare() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'ride_hours' field.
      * @return The value.
      */
    public java.lang.Float getRideHours() {
      return ride_hours;
    }

    /**
      * Sets the value of the 'ride_hours' field.
      * @param value The value of 'ride_hours'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder setRideHours(float value) {
      validate(fields()[7], value);
      this.ride_hours = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'ride_hours' field has been set.
      * @return True if the 'ride_hours' field has been set, false otherwise.
      */
    public boolean hasRideHours() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'ride_hours' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder clearRideHours() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'extra_ride_fare' field.
      * @return The value.
      */
    public java.lang.Float getExtraRideFare() {
      return extra_ride_fare;
    }

    /**
      * Sets the value of the 'extra_ride_fare' field.
      * @param value The value of 'extra_ride_fare'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder setExtraRideFare(float value) {
      validate(fields()[8], value);
      this.extra_ride_fare = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'extra_ride_fare' field has been set.
      * @return True if the 'extra_ride_fare' field has been set, false otherwise.
      */
    public boolean hasExtraRideFare() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'extra_ride_fare' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder clearExtraRideFare() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'driver_bata' field.
      * @return The value.
      */
    public java.lang.Float getDriverBata() {
      return driver_bata;
    }

    /**
      * Sets the value of the 'driver_bata' field.
      * @param value The value of 'driver_bata'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder setDriverBata(float value) {
      validate(fields()[9], value);
      this.driver_bata = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'driver_bata' field has been set.
      * @return True if the 'driver_bata' field has been set, false otherwise.
      */
    public boolean hasDriverBata() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'driver_bata' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder clearDriverBata() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'trip_type' field.
      * @return The value.
      */
    public java.lang.Integer getTripType() {
      return trip_type;
    }

    /**
      * Sets the value of the 'trip_type' field.
      * @param value The value of 'trip_type'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder setTripType(int value) {
      validate(fields()[10], value);
      this.trip_type = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'trip_type' field has been set.
      * @return True if the 'trip_type' field has been set, false otherwise.
      */
    public boolean hasTripType() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'trip_type' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.FareDetails.Builder clearTripType() {
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FareDetails build() {
      try {
        FareDetails record = new FareDetails();
        record.fare_type = fieldSetFlags()[0] ? this.fare_type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.min_km = fieldSetFlags()[1] ? this.min_km : (java.lang.Float) defaultValue(fields()[1]);
        record.min_fare = fieldSetFlags()[2] ? this.min_fare : (java.lang.Float) defaultValue(fields()[2]);
        record.additional_km_fare = fieldSetFlags()[3] ? this.additional_km_fare : (java.lang.Float) defaultValue(fields()[3]);
        record.waiting_time_fare = fieldSetFlags()[4] ? this.waiting_time_fare : (java.lang.Float) defaultValue(fields()[4]);
        record.free_waiting_time = fieldSetFlags()[5] ? this.free_waiting_time : (java.lang.Integer) defaultValue(fields()[5]);
        record.night_fare = fieldSetFlags()[6] ? this.night_fare : (java.lang.Float) defaultValue(fields()[6]);
        record.ride_hours = fieldSetFlags()[7] ? this.ride_hours : (java.lang.Float) defaultValue(fields()[7]);
        record.extra_ride_fare = fieldSetFlags()[8] ? this.extra_ride_fare : (java.lang.Float) defaultValue(fields()[8]);
        record.driver_bata = fieldSetFlags()[9] ? this.driver_bata : (java.lang.Float) defaultValue(fields()[9]);
        record.trip_type = fieldSetFlags()[10] ? this.trip_type : (java.lang.Integer) defaultValue(fields()[10]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FareDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<FareDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FareDetails>
    READER$ = (org.apache.avro.io.DatumReader<FareDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

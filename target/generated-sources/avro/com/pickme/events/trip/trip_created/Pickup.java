/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pickme.events.trip.trip_created;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Pickup extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2495610054901718819L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Pickup\",\"namespace\":\"com.pickme.events.trip.trip_created\",\"fields\":[{\"name\":\"time\",\"type\":\"int\"},{\"name\":\"location\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"lat\",\"type\":\"float\"},{\"name\":\"lng\",\"type\":\"float\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Pickup> ENCODER =
      new BinaryMessageEncoder<Pickup>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Pickup> DECODER =
      new BinaryMessageDecoder<Pickup>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Pickup> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Pickup> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Pickup>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Pickup to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Pickup from a ByteBuffer. */
  public static Pickup fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int time;
  @Deprecated public java.util.List<com.pickme.events.trip.trip_created.Location> location;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Pickup() {}

  /**
   * All-args constructor.
   * @param time The new value for time
   * @param location The new value for location
   */
  public Pickup(java.lang.Integer time, java.util.List<com.pickme.events.trip.trip_created.Location> location) {
    this.time = time;
    this.location = location;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return location;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.Integer)value$; break;
    case 1: location = (java.util.List<com.pickme.events.trip.trip_created.Location>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.Integer getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Integer value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public java.util.List<com.pickme.events.trip.trip_created.Location> getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(java.util.List<com.pickme.events.trip.trip_created.Location> value) {
    this.location = value;
  }

  /**
   * Creates a new Pickup RecordBuilder.
   * @return A new Pickup RecordBuilder
   */
  public static com.pickme.events.trip.trip_created.Pickup.Builder newBuilder() {
    return new com.pickme.events.trip.trip_created.Pickup.Builder();
  }

  /**
   * Creates a new Pickup RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Pickup RecordBuilder
   */
  public static com.pickme.events.trip.trip_created.Pickup.Builder newBuilder(com.pickme.events.trip.trip_created.Pickup.Builder other) {
    return new com.pickme.events.trip.trip_created.Pickup.Builder(other);
  }

  /**
   * Creates a new Pickup RecordBuilder by copying an existing Pickup instance.
   * @param other The existing instance to copy.
   * @return A new Pickup RecordBuilder
   */
  public static com.pickme.events.trip.trip_created.Pickup.Builder newBuilder(com.pickme.events.trip.trip_created.Pickup other) {
    return new com.pickme.events.trip.trip_created.Pickup.Builder(other);
  }

  /**
   * RecordBuilder for Pickup instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Pickup>
    implements org.apache.avro.data.RecordBuilder<Pickup> {

    private int time;
    private java.util.List<com.pickme.events.trip.trip_created.Location> location;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pickme.events.trip.trip_created.Pickup.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.location)) {
        this.location = data().deepCopy(fields()[1].schema(), other.location);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Pickup instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pickme.events.trip.trip_created.Pickup other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.location)) {
        this.location = data().deepCopy(fields()[1].schema(), other.location);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.Integer getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Pickup.Builder setTime(int value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Pickup.Builder clearTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public java.util.List<com.pickme.events.trip.trip_created.Location> getLocation() {
      return location;
    }

    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Pickup.Builder setLocation(java.util.List<com.pickme.events.trip.trip_created.Location> value) {
      validate(fields()[1], value);
      this.location = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Pickup.Builder clearLocation() {
      location = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Pickup build() {
      try {
        Pickup record = new Pickup();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.Integer) defaultValue(fields()[0]);
        record.location = fieldSetFlags()[1] ? this.location : (java.util.List<com.pickme.events.trip.trip_created.Location>) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Pickup>
    WRITER$ = (org.apache.avro.io.DatumWriter<Pickup>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Pickup>
    READER$ = (org.apache.avro.io.DatumReader<Pickup>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

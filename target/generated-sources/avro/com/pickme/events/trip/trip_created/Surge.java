/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pickme.events.trip.trip_created;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Surge extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1080580664616948254L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Surge\",\"namespace\":\"com.pickme.events.trip.trip_created\",\"fields\":[{\"name\":\"region_id\",\"type\":\"int\"},{\"name\":\"value\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Surge> ENCODER =
      new BinaryMessageEncoder<Surge>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Surge> DECODER =
      new BinaryMessageDecoder<Surge>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Surge> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Surge> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Surge>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Surge to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Surge from a ByteBuffer. */
  public static Surge fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int region_id;
  @Deprecated public float value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Surge() {}

  /**
   * All-args constructor.
   * @param region_id The new value for region_id
   * @param value The new value for value
   */
  public Surge(java.lang.Integer region_id, java.lang.Float value) {
    this.region_id = region_id;
    this.value = value;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return region_id;
    case 1: return value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: region_id = (java.lang.Integer)value$; break;
    case 1: value = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'region_id' field.
   * @return The value of the 'region_id' field.
   */
  public java.lang.Integer getRegionId() {
    return region_id;
  }

  /**
   * Sets the value of the 'region_id' field.
   * @param value the value to set.
   */
  public void setRegionId(java.lang.Integer value) {
    this.region_id = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.Float getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.Float value) {
    this.value = value;
  }

  /**
   * Creates a new Surge RecordBuilder.
   * @return A new Surge RecordBuilder
   */
  public static com.pickme.events.trip.trip_created.Surge.Builder newBuilder() {
    return new com.pickme.events.trip.trip_created.Surge.Builder();
  }

  /**
   * Creates a new Surge RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Surge RecordBuilder
   */
  public static com.pickme.events.trip.trip_created.Surge.Builder newBuilder(com.pickme.events.trip.trip_created.Surge.Builder other) {
    return new com.pickme.events.trip.trip_created.Surge.Builder(other);
  }

  /**
   * Creates a new Surge RecordBuilder by copying an existing Surge instance.
   * @param other The existing instance to copy.
   * @return A new Surge RecordBuilder
   */
  public static com.pickme.events.trip.trip_created.Surge.Builder newBuilder(com.pickme.events.trip.trip_created.Surge other) {
    return new com.pickme.events.trip.trip_created.Surge.Builder(other);
  }

  /**
   * RecordBuilder for Surge instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Surge>
    implements org.apache.avro.data.RecordBuilder<Surge> {

    private int region_id;
    private float value;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pickme.events.trip.trip_created.Surge.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.region_id)) {
        this.region_id = data().deepCopy(fields()[0].schema(), other.region_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Surge instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pickme.events.trip.trip_created.Surge other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.region_id)) {
        this.region_id = data().deepCopy(fields()[0].schema(), other.region_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'region_id' field.
      * @return The value.
      */
    public java.lang.Integer getRegionId() {
      return region_id;
    }

    /**
      * Sets the value of the 'region_id' field.
      * @param value The value of 'region_id'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Surge.Builder setRegionId(int value) {
      validate(fields()[0], value);
      this.region_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'region_id' field has been set.
      * @return True if the 'region_id' field has been set, false otherwise.
      */
    public boolean hasRegionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'region_id' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Surge.Builder clearRegionId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.Float getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Surge.Builder setValue(float value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Surge.Builder clearValue() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Surge build() {
      try {
        Surge record = new Surge();
        record.region_id = fieldSetFlags()[0] ? this.region_id : (java.lang.Integer) defaultValue(fields()[0]);
        record.value = fieldSetFlags()[1] ? this.value : (java.lang.Float) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Surge>
    WRITER$ = (org.apache.avro.io.DatumWriter<Surge>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Surge>
    READER$ = (org.apache.avro.io.DatumReader<Surge>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

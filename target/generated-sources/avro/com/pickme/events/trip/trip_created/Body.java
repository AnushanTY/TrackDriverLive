/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pickme.events.trip.trip_created;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Body extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7494205101684360119L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Body\",\"namespace\":\"com.pickme.events.trip.trip_created\",\"fields\":[{\"name\":\"module\",\"type\":\"int\"},{\"name\":\"booked_by\",\"type\":\"int\"},{\"name\":\"trip_id\",\"type\":\"int\"},{\"name\":\"vehicle_type\",\"type\":\"int\"},{\"name\":\"pre_booking\",\"type\":\"boolean\"},{\"name\":\"passenger\",\"type\":{\"type\":\"record\",\"name\":\"Passenger\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"}]}},{\"name\":\"driver\",\"type\":{\"type\":\"record\",\"name\":\"Driver\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"}]}},{\"name\":\"corporate\",\"type\":{\"type\":\"record\",\"name\":\"Corporate\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"dep_id\",\"type\":\"int\"}]}},{\"name\":\"pickup\",\"type\":{\"type\":\"record\",\"name\":\"Pickup\",\"fields\":[{\"name\":\"time\",\"type\":\"int\"},{\"name\":\"location\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"lat\",\"type\":\"float\"},{\"name\":\"lng\",\"type\":\"float\"}]}}}]}},{\"name\":\"drop\",\"type\":{\"type\":\"record\",\"name\":\"Drop\",\"fields\":[{\"name\":\"location\",\"type\":{\"type\":\"array\",\"items\":\"Location\"}}]}},{\"name\":\"promotion\",\"type\":{\"type\":\"record\",\"name\":\"Promotion\",\"fields\":[{\"name\":\"code\",\"type\":\"string\"}]}},{\"name\":\"region\",\"type\":{\"type\":\"record\",\"name\":\"Region\",\"fields\":[{\"name\":\"ids\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"default\":[]}]}},{\"name\":\"payment\",\"type\":{\"type\":\"record\",\"name\":\"Payment\",\"fields\":[{\"name\":\"primary_method\",\"type\":\"int\"},{\"name\":\"secondary_method\",\"type\":\"int\"}]}},{\"name\":\"comments\",\"type\":{\"type\":\"record\",\"name\":\"Comments\",\"fields\":[{\"name\":\"remark\",\"type\":\"string\"},{\"name\":\"driver_notes\",\"type\":\"string\"}]}},{\"name\":\"filters\",\"type\":{\"type\":\"record\",\"name\":\"Filters\",\"fields\":[{\"name\":\"driver\",\"type\":{\"type\":\"record\",\"name\":\"DriverFilter\",\"fields\":[{\"name\":\"language_id\",\"type\":\"int\"}]}},{\"name\":\"vehicle\",\"type\":{\"type\":\"record\",\"name\":\"Vehicle\",\"fields\":[{\"name\":\"company_id\",\"type\":\"int\"},{\"name\":\"brand_id\",\"type\":\"int\"},{\"name\":\"color_id\",\"type\":\"int\"}]}}]}},{\"name\":\"surge\",\"type\":{\"type\":\"record\",\"name\":\"Surge\",\"fields\":[{\"name\":\"region_id\",\"type\":\"int\"},{\"name\":\"value\",\"type\":\"float\"}]}},{\"name\":\"fare_details\",\"type\":{\"type\":\"record\",\"name\":\"FareDetails\",\"fields\":[{\"name\":\"fare_type\",\"type\":\"string\"},{\"name\":\"min_km\",\"type\":\"float\"},{\"name\":\"min_fare\",\"type\":\"float\"},{\"name\":\"additional_km_fare\",\"type\":\"float\"},{\"name\":\"waiting_time_fare\",\"type\":\"float\"},{\"name\":\"free_waiting_time\",\"type\":\"int\"},{\"name\":\"night_fare\",\"type\":\"float\"},{\"name\":\"ride_hours\",\"type\":\"float\"},{\"name\":\"extra_ride_fare\",\"type\":\"float\"},{\"name\":\"driver_bata\",\"type\":\"float\"},{\"name\":\"trip_type\",\"type\":\"int\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Body> ENCODER =
      new BinaryMessageEncoder<Body>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Body> DECODER =
      new BinaryMessageDecoder<Body>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Body> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Body> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Body>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Body to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Body from a ByteBuffer. */
  public static Body fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int module;
  @Deprecated public int booked_by;
  @Deprecated public int trip_id;
  @Deprecated public int vehicle_type;
  @Deprecated public boolean pre_booking;
  @Deprecated public com.pickme.events.trip.trip_created.Passenger passenger;
  @Deprecated public com.pickme.events.trip.trip_created.Driver driver;
  @Deprecated public com.pickme.events.trip.trip_created.Corporate corporate;
  @Deprecated public com.pickme.events.trip.trip_created.Pickup pickup;
  @Deprecated public com.pickme.events.trip.trip_created.Drop drop;
  @Deprecated public com.pickme.events.trip.trip_created.Promotion promotion;
  @Deprecated public com.pickme.events.trip.trip_created.Region region;
  @Deprecated public com.pickme.events.trip.trip_created.Payment payment;
  @Deprecated public com.pickme.events.trip.trip_created.Comments comments;
  @Deprecated public com.pickme.events.trip.trip_created.Filters filters;
  @Deprecated public com.pickme.events.trip.trip_created.Surge surge;
  @Deprecated public com.pickme.events.trip.trip_created.FareDetails fare_details;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Body() {}

  /**
   * All-args constructor.
   * @param module The new value for module
   * @param booked_by The new value for booked_by
   * @param trip_id The new value for trip_id
   * @param vehicle_type The new value for vehicle_type
   * @param pre_booking The new value for pre_booking
   * @param passenger The new value for passenger
   * @param driver The new value for driver
   * @param corporate The new value for corporate
   * @param pickup The new value for pickup
   * @param drop The new value for drop
   * @param promotion The new value for promotion
   * @param region The new value for region
   * @param payment The new value for payment
   * @param comments The new value for comments
   * @param filters The new value for filters
   * @param surge The new value for surge
   * @param fare_details The new value for fare_details
   */
  public Body(java.lang.Integer module, java.lang.Integer booked_by, java.lang.Integer trip_id, java.lang.Integer vehicle_type, java.lang.Boolean pre_booking, com.pickme.events.trip.trip_created.Passenger passenger, com.pickme.events.trip.trip_created.Driver driver, com.pickme.events.trip.trip_created.Corporate corporate, com.pickme.events.trip.trip_created.Pickup pickup, com.pickme.events.trip.trip_created.Drop drop, com.pickme.events.trip.trip_created.Promotion promotion, com.pickme.events.trip.trip_created.Region region, com.pickme.events.trip.trip_created.Payment payment, com.pickme.events.trip.trip_created.Comments comments, com.pickme.events.trip.trip_created.Filters filters, com.pickme.events.trip.trip_created.Surge surge, com.pickme.events.trip.trip_created.FareDetails fare_details) {
    this.module = module;
    this.booked_by = booked_by;
    this.trip_id = trip_id;
    this.vehicle_type = vehicle_type;
    this.pre_booking = pre_booking;
    this.passenger = passenger;
    this.driver = driver;
    this.corporate = corporate;
    this.pickup = pickup;
    this.drop = drop;
    this.promotion = promotion;
    this.region = region;
    this.payment = payment;
    this.comments = comments;
    this.filters = filters;
    this.surge = surge;
    this.fare_details = fare_details;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return module;
    case 1: return booked_by;
    case 2: return trip_id;
    case 3: return vehicle_type;
    case 4: return pre_booking;
    case 5: return passenger;
    case 6: return driver;
    case 7: return corporate;
    case 8: return pickup;
    case 9: return drop;
    case 10: return promotion;
    case 11: return region;
    case 12: return payment;
    case 13: return comments;
    case 14: return filters;
    case 15: return surge;
    case 16: return fare_details;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: module = (java.lang.Integer)value$; break;
    case 1: booked_by = (java.lang.Integer)value$; break;
    case 2: trip_id = (java.lang.Integer)value$; break;
    case 3: vehicle_type = (java.lang.Integer)value$; break;
    case 4: pre_booking = (java.lang.Boolean)value$; break;
    case 5: passenger = (com.pickme.events.trip.trip_created.Passenger)value$; break;
    case 6: driver = (com.pickme.events.trip.trip_created.Driver)value$; break;
    case 7: corporate = (com.pickme.events.trip.trip_created.Corporate)value$; break;
    case 8: pickup = (com.pickme.events.trip.trip_created.Pickup)value$; break;
    case 9: drop = (com.pickme.events.trip.trip_created.Drop)value$; break;
    case 10: promotion = (com.pickme.events.trip.trip_created.Promotion)value$; break;
    case 11: region = (com.pickme.events.trip.trip_created.Region)value$; break;
    case 12: payment = (com.pickme.events.trip.trip_created.Payment)value$; break;
    case 13: comments = (com.pickme.events.trip.trip_created.Comments)value$; break;
    case 14: filters = (com.pickme.events.trip.trip_created.Filters)value$; break;
    case 15: surge = (com.pickme.events.trip.trip_created.Surge)value$; break;
    case 16: fare_details = (com.pickme.events.trip.trip_created.FareDetails)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'module' field.
   * @return The value of the 'module' field.
   */
  public java.lang.Integer getModule() {
    return module;
  }

  /**
   * Sets the value of the 'module' field.
   * @param value the value to set.
   */
  public void setModule(java.lang.Integer value) {
    this.module = value;
  }

  /**
   * Gets the value of the 'booked_by' field.
   * @return The value of the 'booked_by' field.
   */
  public java.lang.Integer getBookedBy() {
    return booked_by;
  }

  /**
   * Sets the value of the 'booked_by' field.
   * @param value the value to set.
   */
  public void setBookedBy(java.lang.Integer value) {
    this.booked_by = value;
  }

  /**
   * Gets the value of the 'trip_id' field.
   * @return The value of the 'trip_id' field.
   */
  public java.lang.Integer getTripId() {
    return trip_id;
  }

  /**
   * Sets the value of the 'trip_id' field.
   * @param value the value to set.
   */
  public void setTripId(java.lang.Integer value) {
    this.trip_id = value;
  }

  /**
   * Gets the value of the 'vehicle_type' field.
   * @return The value of the 'vehicle_type' field.
   */
  public java.lang.Integer getVehicleType() {
    return vehicle_type;
  }

  /**
   * Sets the value of the 'vehicle_type' field.
   * @param value the value to set.
   */
  public void setVehicleType(java.lang.Integer value) {
    this.vehicle_type = value;
  }

  /**
   * Gets the value of the 'pre_booking' field.
   * @return The value of the 'pre_booking' field.
   */
  public java.lang.Boolean getPreBooking() {
    return pre_booking;
  }

  /**
   * Sets the value of the 'pre_booking' field.
   * @param value the value to set.
   */
  public void setPreBooking(java.lang.Boolean value) {
    this.pre_booking = value;
  }

  /**
   * Gets the value of the 'passenger' field.
   * @return The value of the 'passenger' field.
   */
  public com.pickme.events.trip.trip_created.Passenger getPassenger() {
    return passenger;
  }

  /**
   * Sets the value of the 'passenger' field.
   * @param value the value to set.
   */
  public void setPassenger(com.pickme.events.trip.trip_created.Passenger value) {
    this.passenger = value;
  }

  /**
   * Gets the value of the 'driver' field.
   * @return The value of the 'driver' field.
   */
  public com.pickme.events.trip.trip_created.Driver getDriver() {
    return driver;
  }

  /**
   * Sets the value of the 'driver' field.
   * @param value the value to set.
   */
  public void setDriver(com.pickme.events.trip.trip_created.Driver value) {
    this.driver = value;
  }

  /**
   * Gets the value of the 'corporate' field.
   * @return The value of the 'corporate' field.
   */
  public com.pickme.events.trip.trip_created.Corporate getCorporate() {
    return corporate;
  }

  /**
   * Sets the value of the 'corporate' field.
   * @param value the value to set.
   */
  public void setCorporate(com.pickme.events.trip.trip_created.Corporate value) {
    this.corporate = value;
  }

  /**
   * Gets the value of the 'pickup' field.
   * @return The value of the 'pickup' field.
   */
  public com.pickme.events.trip.trip_created.Pickup getPickup() {
    return pickup;
  }

  /**
   * Sets the value of the 'pickup' field.
   * @param value the value to set.
   */
  public void setPickup(com.pickme.events.trip.trip_created.Pickup value) {
    this.pickup = value;
  }

  /**
   * Gets the value of the 'drop' field.
   * @return The value of the 'drop' field.
   */
  public com.pickme.events.trip.trip_created.Drop getDrop() {
    return drop;
  }

  /**
   * Sets the value of the 'drop' field.
   * @param value the value to set.
   */
  public void setDrop(com.pickme.events.trip.trip_created.Drop value) {
    this.drop = value;
  }

  /**
   * Gets the value of the 'promotion' field.
   * @return The value of the 'promotion' field.
   */
  public com.pickme.events.trip.trip_created.Promotion getPromotion() {
    return promotion;
  }

  /**
   * Sets the value of the 'promotion' field.
   * @param value the value to set.
   */
  public void setPromotion(com.pickme.events.trip.trip_created.Promotion value) {
    this.promotion = value;
  }

  /**
   * Gets the value of the 'region' field.
   * @return The value of the 'region' field.
   */
  public com.pickme.events.trip.trip_created.Region getRegion() {
    return region;
  }

  /**
   * Sets the value of the 'region' field.
   * @param value the value to set.
   */
  public void setRegion(com.pickme.events.trip.trip_created.Region value) {
    this.region = value;
  }

  /**
   * Gets the value of the 'payment' field.
   * @return The value of the 'payment' field.
   */
  public com.pickme.events.trip.trip_created.Payment getPayment() {
    return payment;
  }

  /**
   * Sets the value of the 'payment' field.
   * @param value the value to set.
   */
  public void setPayment(com.pickme.events.trip.trip_created.Payment value) {
    this.payment = value;
  }

  /**
   * Gets the value of the 'comments' field.
   * @return The value of the 'comments' field.
   */
  public com.pickme.events.trip.trip_created.Comments getComments() {
    return comments;
  }

  /**
   * Sets the value of the 'comments' field.
   * @param value the value to set.
   */
  public void setComments(com.pickme.events.trip.trip_created.Comments value) {
    this.comments = value;
  }

  /**
   * Gets the value of the 'filters' field.
   * @return The value of the 'filters' field.
   */
  public com.pickme.events.trip.trip_created.Filters getFilters() {
    return filters;
  }

  /**
   * Sets the value of the 'filters' field.
   * @param value the value to set.
   */
  public void setFilters(com.pickme.events.trip.trip_created.Filters value) {
    this.filters = value;
  }

  /**
   * Gets the value of the 'surge' field.
   * @return The value of the 'surge' field.
   */
  public com.pickme.events.trip.trip_created.Surge getSurge() {
    return surge;
  }

  /**
   * Sets the value of the 'surge' field.
   * @param value the value to set.
   */
  public void setSurge(com.pickme.events.trip.trip_created.Surge value) {
    this.surge = value;
  }

  /**
   * Gets the value of the 'fare_details' field.
   * @return The value of the 'fare_details' field.
   */
  public com.pickme.events.trip.trip_created.FareDetails getFareDetails() {
    return fare_details;
  }

  /**
   * Sets the value of the 'fare_details' field.
   * @param value the value to set.
   */
  public void setFareDetails(com.pickme.events.trip.trip_created.FareDetails value) {
    this.fare_details = value;
  }

  /**
   * Creates a new Body RecordBuilder.
   * @return A new Body RecordBuilder
   */
  public static com.pickme.events.trip.trip_created.Body.Builder newBuilder() {
    return new com.pickme.events.trip.trip_created.Body.Builder();
  }

  /**
   * Creates a new Body RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Body RecordBuilder
   */
  public static com.pickme.events.trip.trip_created.Body.Builder newBuilder(com.pickme.events.trip.trip_created.Body.Builder other) {
    return new com.pickme.events.trip.trip_created.Body.Builder(other);
  }

  /**
   * Creates a new Body RecordBuilder by copying an existing Body instance.
   * @param other The existing instance to copy.
   * @return A new Body RecordBuilder
   */
  public static com.pickme.events.trip.trip_created.Body.Builder newBuilder(com.pickme.events.trip.trip_created.Body other) {
    return new com.pickme.events.trip.trip_created.Body.Builder(other);
  }

  /**
   * RecordBuilder for Body instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Body>
    implements org.apache.avro.data.RecordBuilder<Body> {

    private int module;
    private int booked_by;
    private int trip_id;
    private int vehicle_type;
    private boolean pre_booking;
    private com.pickme.events.trip.trip_created.Passenger passenger;
    private com.pickme.events.trip.trip_created.Passenger.Builder passengerBuilder;
    private com.pickme.events.trip.trip_created.Driver driver;
    private com.pickme.events.trip.trip_created.Driver.Builder driverBuilder;
    private com.pickme.events.trip.trip_created.Corporate corporate;
    private com.pickme.events.trip.trip_created.Corporate.Builder corporateBuilder;
    private com.pickme.events.trip.trip_created.Pickup pickup;
    private com.pickme.events.trip.trip_created.Pickup.Builder pickupBuilder;
    private com.pickme.events.trip.trip_created.Drop drop;
    private com.pickme.events.trip.trip_created.Drop.Builder dropBuilder;
    private com.pickme.events.trip.trip_created.Promotion promotion;
    private com.pickme.events.trip.trip_created.Promotion.Builder promotionBuilder;
    private com.pickme.events.trip.trip_created.Region region;
    private com.pickme.events.trip.trip_created.Region.Builder regionBuilder;
    private com.pickme.events.trip.trip_created.Payment payment;
    private com.pickme.events.trip.trip_created.Payment.Builder paymentBuilder;
    private com.pickme.events.trip.trip_created.Comments comments;
    private com.pickme.events.trip.trip_created.Comments.Builder commentsBuilder;
    private com.pickme.events.trip.trip_created.Filters filters;
    private com.pickme.events.trip.trip_created.Filters.Builder filtersBuilder;
    private com.pickme.events.trip.trip_created.Surge surge;
    private com.pickme.events.trip.trip_created.Surge.Builder surgeBuilder;
    private com.pickme.events.trip.trip_created.FareDetails fare_details;
    private com.pickme.events.trip.trip_created.FareDetails.Builder fare_detailsBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pickme.events.trip.trip_created.Body.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.module)) {
        this.module = data().deepCopy(fields()[0].schema(), other.module);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.booked_by)) {
        this.booked_by = data().deepCopy(fields()[1].schema(), other.booked_by);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.trip_id)) {
        this.trip_id = data().deepCopy(fields()[2].schema(), other.trip_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vehicle_type)) {
        this.vehicle_type = data().deepCopy(fields()[3].schema(), other.vehicle_type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.pre_booking)) {
        this.pre_booking = data().deepCopy(fields()[4].schema(), other.pre_booking);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.passenger)) {
        this.passenger = data().deepCopy(fields()[5].schema(), other.passenger);
        fieldSetFlags()[5] = true;
      }
      if (other.hasPassengerBuilder()) {
        this.passengerBuilder = com.pickme.events.trip.trip_created.Passenger.newBuilder(other.getPassengerBuilder());
      }
      if (isValidValue(fields()[6], other.driver)) {
        this.driver = data().deepCopy(fields()[6].schema(), other.driver);
        fieldSetFlags()[6] = true;
      }
      if (other.hasDriverBuilder()) {
        this.driverBuilder = com.pickme.events.trip.trip_created.Driver.newBuilder(other.getDriverBuilder());
      }
      if (isValidValue(fields()[7], other.corporate)) {
        this.corporate = data().deepCopy(fields()[7].schema(), other.corporate);
        fieldSetFlags()[7] = true;
      }
      if (other.hasCorporateBuilder()) {
        this.corporateBuilder = com.pickme.events.trip.trip_created.Corporate.newBuilder(other.getCorporateBuilder());
      }
      if (isValidValue(fields()[8], other.pickup)) {
        this.pickup = data().deepCopy(fields()[8].schema(), other.pickup);
        fieldSetFlags()[8] = true;
      }
      if (other.hasPickupBuilder()) {
        this.pickupBuilder = com.pickme.events.trip.trip_created.Pickup.newBuilder(other.getPickupBuilder());
      }
      if (isValidValue(fields()[9], other.drop)) {
        this.drop = data().deepCopy(fields()[9].schema(), other.drop);
        fieldSetFlags()[9] = true;
      }
      if (other.hasDropBuilder()) {
        this.dropBuilder = com.pickme.events.trip.trip_created.Drop.newBuilder(other.getDropBuilder());
      }
      if (isValidValue(fields()[10], other.promotion)) {
        this.promotion = data().deepCopy(fields()[10].schema(), other.promotion);
        fieldSetFlags()[10] = true;
      }
      if (other.hasPromotionBuilder()) {
        this.promotionBuilder = com.pickme.events.trip.trip_created.Promotion.newBuilder(other.getPromotionBuilder());
      }
      if (isValidValue(fields()[11], other.region)) {
        this.region = data().deepCopy(fields()[11].schema(), other.region);
        fieldSetFlags()[11] = true;
      }
      if (other.hasRegionBuilder()) {
        this.regionBuilder = com.pickme.events.trip.trip_created.Region.newBuilder(other.getRegionBuilder());
      }
      if (isValidValue(fields()[12], other.payment)) {
        this.payment = data().deepCopy(fields()[12].schema(), other.payment);
        fieldSetFlags()[12] = true;
      }
      if (other.hasPaymentBuilder()) {
        this.paymentBuilder = com.pickme.events.trip.trip_created.Payment.newBuilder(other.getPaymentBuilder());
      }
      if (isValidValue(fields()[13], other.comments)) {
        this.comments = data().deepCopy(fields()[13].schema(), other.comments);
        fieldSetFlags()[13] = true;
      }
      if (other.hasCommentsBuilder()) {
        this.commentsBuilder = com.pickme.events.trip.trip_created.Comments.newBuilder(other.getCommentsBuilder());
      }
      if (isValidValue(fields()[14], other.filters)) {
        this.filters = data().deepCopy(fields()[14].schema(), other.filters);
        fieldSetFlags()[14] = true;
      }
      if (other.hasFiltersBuilder()) {
        this.filtersBuilder = com.pickme.events.trip.trip_created.Filters.newBuilder(other.getFiltersBuilder());
      }
      if (isValidValue(fields()[15], other.surge)) {
        this.surge = data().deepCopy(fields()[15].schema(), other.surge);
        fieldSetFlags()[15] = true;
      }
      if (other.hasSurgeBuilder()) {
        this.surgeBuilder = com.pickme.events.trip.trip_created.Surge.newBuilder(other.getSurgeBuilder());
      }
      if (isValidValue(fields()[16], other.fare_details)) {
        this.fare_details = data().deepCopy(fields()[16].schema(), other.fare_details);
        fieldSetFlags()[16] = true;
      }
      if (other.hasFareDetailsBuilder()) {
        this.fare_detailsBuilder = com.pickme.events.trip.trip_created.FareDetails.newBuilder(other.getFareDetailsBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Body instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pickme.events.trip.trip_created.Body other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.module)) {
        this.module = data().deepCopy(fields()[0].schema(), other.module);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.booked_by)) {
        this.booked_by = data().deepCopy(fields()[1].schema(), other.booked_by);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.trip_id)) {
        this.trip_id = data().deepCopy(fields()[2].schema(), other.trip_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vehicle_type)) {
        this.vehicle_type = data().deepCopy(fields()[3].schema(), other.vehicle_type);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.pre_booking)) {
        this.pre_booking = data().deepCopy(fields()[4].schema(), other.pre_booking);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.passenger)) {
        this.passenger = data().deepCopy(fields()[5].schema(), other.passenger);
        fieldSetFlags()[5] = true;
      }
      this.passengerBuilder = null;
      if (isValidValue(fields()[6], other.driver)) {
        this.driver = data().deepCopy(fields()[6].schema(), other.driver);
        fieldSetFlags()[6] = true;
      }
      this.driverBuilder = null;
      if (isValidValue(fields()[7], other.corporate)) {
        this.corporate = data().deepCopy(fields()[7].schema(), other.corporate);
        fieldSetFlags()[7] = true;
      }
      this.corporateBuilder = null;
      if (isValidValue(fields()[8], other.pickup)) {
        this.pickup = data().deepCopy(fields()[8].schema(), other.pickup);
        fieldSetFlags()[8] = true;
      }
      this.pickupBuilder = null;
      if (isValidValue(fields()[9], other.drop)) {
        this.drop = data().deepCopy(fields()[9].schema(), other.drop);
        fieldSetFlags()[9] = true;
      }
      this.dropBuilder = null;
      if (isValidValue(fields()[10], other.promotion)) {
        this.promotion = data().deepCopy(fields()[10].schema(), other.promotion);
        fieldSetFlags()[10] = true;
      }
      this.promotionBuilder = null;
      if (isValidValue(fields()[11], other.region)) {
        this.region = data().deepCopy(fields()[11].schema(), other.region);
        fieldSetFlags()[11] = true;
      }
      this.regionBuilder = null;
      if (isValidValue(fields()[12], other.payment)) {
        this.payment = data().deepCopy(fields()[12].schema(), other.payment);
        fieldSetFlags()[12] = true;
      }
      this.paymentBuilder = null;
      if (isValidValue(fields()[13], other.comments)) {
        this.comments = data().deepCopy(fields()[13].schema(), other.comments);
        fieldSetFlags()[13] = true;
      }
      this.commentsBuilder = null;
      if (isValidValue(fields()[14], other.filters)) {
        this.filters = data().deepCopy(fields()[14].schema(), other.filters);
        fieldSetFlags()[14] = true;
      }
      this.filtersBuilder = null;
      if (isValidValue(fields()[15], other.surge)) {
        this.surge = data().deepCopy(fields()[15].schema(), other.surge);
        fieldSetFlags()[15] = true;
      }
      this.surgeBuilder = null;
      if (isValidValue(fields()[16], other.fare_details)) {
        this.fare_details = data().deepCopy(fields()[16].schema(), other.fare_details);
        fieldSetFlags()[16] = true;
      }
      this.fare_detailsBuilder = null;
    }

    /**
      * Gets the value of the 'module' field.
      * @return The value.
      */
    public java.lang.Integer getModule() {
      return module;
    }

    /**
      * Sets the value of the 'module' field.
      * @param value The value of 'module'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setModule(int value) {
      validate(fields()[0], value);
      this.module = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'module' field has been set.
      * @return True if the 'module' field has been set, false otherwise.
      */
    public boolean hasModule() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'module' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearModule() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'booked_by' field.
      * @return The value.
      */
    public java.lang.Integer getBookedBy() {
      return booked_by;
    }

    /**
      * Sets the value of the 'booked_by' field.
      * @param value The value of 'booked_by'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setBookedBy(int value) {
      validate(fields()[1], value);
      this.booked_by = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'booked_by' field has been set.
      * @return True if the 'booked_by' field has been set, false otherwise.
      */
    public boolean hasBookedBy() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'booked_by' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearBookedBy() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'trip_id' field.
      * @return The value.
      */
    public java.lang.Integer getTripId() {
      return trip_id;
    }

    /**
      * Sets the value of the 'trip_id' field.
      * @param value The value of 'trip_id'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setTripId(int value) {
      validate(fields()[2], value);
      this.trip_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'trip_id' field has been set.
      * @return True if the 'trip_id' field has been set, false otherwise.
      */
    public boolean hasTripId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'trip_id' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearTripId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'vehicle_type' field.
      * @return The value.
      */
    public java.lang.Integer getVehicleType() {
      return vehicle_type;
    }

    /**
      * Sets the value of the 'vehicle_type' field.
      * @param value The value of 'vehicle_type'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setVehicleType(int value) {
      validate(fields()[3], value);
      this.vehicle_type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'vehicle_type' field has been set.
      * @return True if the 'vehicle_type' field has been set, false otherwise.
      */
    public boolean hasVehicleType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'vehicle_type' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearVehicleType() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'pre_booking' field.
      * @return The value.
      */
    public java.lang.Boolean getPreBooking() {
      return pre_booking;
    }

    /**
      * Sets the value of the 'pre_booking' field.
      * @param value The value of 'pre_booking'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setPreBooking(boolean value) {
      validate(fields()[4], value);
      this.pre_booking = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'pre_booking' field has been set.
      * @return True if the 'pre_booking' field has been set, false otherwise.
      */
    public boolean hasPreBooking() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'pre_booking' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearPreBooking() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'passenger' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_created.Passenger getPassenger() {
      return passenger;
    }

    /**
      * Sets the value of the 'passenger' field.
      * @param value The value of 'passenger'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setPassenger(com.pickme.events.trip.trip_created.Passenger value) {
      validate(fields()[5], value);
      this.passengerBuilder = null;
      this.passenger = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'passenger' field has been set.
      * @return True if the 'passenger' field has been set, false otherwise.
      */
    public boolean hasPassenger() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'passenger' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Passenger.Builder getPassengerBuilder() {
      if (passengerBuilder == null) {
        if (hasPassenger()) {
          setPassengerBuilder(com.pickme.events.trip.trip_created.Passenger.newBuilder(passenger));
        } else {
          setPassengerBuilder(com.pickme.events.trip.trip_created.Passenger.newBuilder());
        }
      }
      return passengerBuilder;
    }

    /**
     * Sets the Builder instance for the 'passenger' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Body.Builder setPassengerBuilder(com.pickme.events.trip.trip_created.Passenger.Builder value) {
      clearPassenger();
      passengerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'passenger' field has an active Builder instance
     * @return True if the 'passenger' field has an active Builder instance
     */
    public boolean hasPassengerBuilder() {
      return passengerBuilder != null;
    }

    /**
      * Clears the value of the 'passenger' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearPassenger() {
      passenger = null;
      passengerBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'driver' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_created.Driver getDriver() {
      return driver;
    }

    /**
      * Sets the value of the 'driver' field.
      * @param value The value of 'driver'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setDriver(com.pickme.events.trip.trip_created.Driver value) {
      validate(fields()[6], value);
      this.driverBuilder = null;
      this.driver = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'driver' field has been set.
      * @return True if the 'driver' field has been set, false otherwise.
      */
    public boolean hasDriver() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'driver' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Driver.Builder getDriverBuilder() {
      if (driverBuilder == null) {
        if (hasDriver()) {
          setDriverBuilder(com.pickme.events.trip.trip_created.Driver.newBuilder(driver));
        } else {
          setDriverBuilder(com.pickme.events.trip.trip_created.Driver.newBuilder());
        }
      }
      return driverBuilder;
    }

    /**
     * Sets the Builder instance for the 'driver' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Body.Builder setDriverBuilder(com.pickme.events.trip.trip_created.Driver.Builder value) {
      clearDriver();
      driverBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'driver' field has an active Builder instance
     * @return True if the 'driver' field has an active Builder instance
     */
    public boolean hasDriverBuilder() {
      return driverBuilder != null;
    }

    /**
      * Clears the value of the 'driver' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearDriver() {
      driver = null;
      driverBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'corporate' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_created.Corporate getCorporate() {
      return corporate;
    }

    /**
      * Sets the value of the 'corporate' field.
      * @param value The value of 'corporate'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setCorporate(com.pickme.events.trip.trip_created.Corporate value) {
      validate(fields()[7], value);
      this.corporateBuilder = null;
      this.corporate = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'corporate' field has been set.
      * @return True if the 'corporate' field has been set, false otherwise.
      */
    public boolean hasCorporate() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'corporate' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Corporate.Builder getCorporateBuilder() {
      if (corporateBuilder == null) {
        if (hasCorporate()) {
          setCorporateBuilder(com.pickme.events.trip.trip_created.Corporate.newBuilder(corporate));
        } else {
          setCorporateBuilder(com.pickme.events.trip.trip_created.Corporate.newBuilder());
        }
      }
      return corporateBuilder;
    }

    /**
     * Sets the Builder instance for the 'corporate' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Body.Builder setCorporateBuilder(com.pickme.events.trip.trip_created.Corporate.Builder value) {
      clearCorporate();
      corporateBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'corporate' field has an active Builder instance
     * @return True if the 'corporate' field has an active Builder instance
     */
    public boolean hasCorporateBuilder() {
      return corporateBuilder != null;
    }

    /**
      * Clears the value of the 'corporate' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearCorporate() {
      corporate = null;
      corporateBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'pickup' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_created.Pickup getPickup() {
      return pickup;
    }

    /**
      * Sets the value of the 'pickup' field.
      * @param value The value of 'pickup'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setPickup(com.pickme.events.trip.trip_created.Pickup value) {
      validate(fields()[8], value);
      this.pickupBuilder = null;
      this.pickup = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'pickup' field has been set.
      * @return True if the 'pickup' field has been set, false otherwise.
      */
    public boolean hasPickup() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'pickup' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Pickup.Builder getPickupBuilder() {
      if (pickupBuilder == null) {
        if (hasPickup()) {
          setPickupBuilder(com.pickme.events.trip.trip_created.Pickup.newBuilder(pickup));
        } else {
          setPickupBuilder(com.pickme.events.trip.trip_created.Pickup.newBuilder());
        }
      }
      return pickupBuilder;
    }

    /**
     * Sets the Builder instance for the 'pickup' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Body.Builder setPickupBuilder(com.pickme.events.trip.trip_created.Pickup.Builder value) {
      clearPickup();
      pickupBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'pickup' field has an active Builder instance
     * @return True if the 'pickup' field has an active Builder instance
     */
    public boolean hasPickupBuilder() {
      return pickupBuilder != null;
    }

    /**
      * Clears the value of the 'pickup' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearPickup() {
      pickup = null;
      pickupBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'drop' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_created.Drop getDrop() {
      return drop;
    }

    /**
      * Sets the value of the 'drop' field.
      * @param value The value of 'drop'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setDrop(com.pickme.events.trip.trip_created.Drop value) {
      validate(fields()[9], value);
      this.dropBuilder = null;
      this.drop = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'drop' field has been set.
      * @return True if the 'drop' field has been set, false otherwise.
      */
    public boolean hasDrop() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'drop' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Drop.Builder getDropBuilder() {
      if (dropBuilder == null) {
        if (hasDrop()) {
          setDropBuilder(com.pickme.events.trip.trip_created.Drop.newBuilder(drop));
        } else {
          setDropBuilder(com.pickme.events.trip.trip_created.Drop.newBuilder());
        }
      }
      return dropBuilder;
    }

    /**
     * Sets the Builder instance for the 'drop' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Body.Builder setDropBuilder(com.pickme.events.trip.trip_created.Drop.Builder value) {
      clearDrop();
      dropBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'drop' field has an active Builder instance
     * @return True if the 'drop' field has an active Builder instance
     */
    public boolean hasDropBuilder() {
      return dropBuilder != null;
    }

    /**
      * Clears the value of the 'drop' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearDrop() {
      drop = null;
      dropBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'promotion' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_created.Promotion getPromotion() {
      return promotion;
    }

    /**
      * Sets the value of the 'promotion' field.
      * @param value The value of 'promotion'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setPromotion(com.pickme.events.trip.trip_created.Promotion value) {
      validate(fields()[10], value);
      this.promotionBuilder = null;
      this.promotion = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'promotion' field has been set.
      * @return True if the 'promotion' field has been set, false otherwise.
      */
    public boolean hasPromotion() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'promotion' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Promotion.Builder getPromotionBuilder() {
      if (promotionBuilder == null) {
        if (hasPromotion()) {
          setPromotionBuilder(com.pickme.events.trip.trip_created.Promotion.newBuilder(promotion));
        } else {
          setPromotionBuilder(com.pickme.events.trip.trip_created.Promotion.newBuilder());
        }
      }
      return promotionBuilder;
    }

    /**
     * Sets the Builder instance for the 'promotion' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Body.Builder setPromotionBuilder(com.pickme.events.trip.trip_created.Promotion.Builder value) {
      clearPromotion();
      promotionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'promotion' field has an active Builder instance
     * @return True if the 'promotion' field has an active Builder instance
     */
    public boolean hasPromotionBuilder() {
      return promotionBuilder != null;
    }

    /**
      * Clears the value of the 'promotion' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearPromotion() {
      promotion = null;
      promotionBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'region' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_created.Region getRegion() {
      return region;
    }

    /**
      * Sets the value of the 'region' field.
      * @param value The value of 'region'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setRegion(com.pickme.events.trip.trip_created.Region value) {
      validate(fields()[11], value);
      this.regionBuilder = null;
      this.region = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'region' field has been set.
      * @return True if the 'region' field has been set, false otherwise.
      */
    public boolean hasRegion() {
      return fieldSetFlags()[11];
    }

    /**
     * Gets the Builder instance for the 'region' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Region.Builder getRegionBuilder() {
      if (regionBuilder == null) {
        if (hasRegion()) {
          setRegionBuilder(com.pickme.events.trip.trip_created.Region.newBuilder(region));
        } else {
          setRegionBuilder(com.pickme.events.trip.trip_created.Region.newBuilder());
        }
      }
      return regionBuilder;
    }

    /**
     * Sets the Builder instance for the 'region' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Body.Builder setRegionBuilder(com.pickme.events.trip.trip_created.Region.Builder value) {
      clearRegion();
      regionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'region' field has an active Builder instance
     * @return True if the 'region' field has an active Builder instance
     */
    public boolean hasRegionBuilder() {
      return regionBuilder != null;
    }

    /**
      * Clears the value of the 'region' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearRegion() {
      region = null;
      regionBuilder = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_created.Payment getPayment() {
      return payment;
    }

    /**
      * Sets the value of the 'payment' field.
      * @param value The value of 'payment'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setPayment(com.pickme.events.trip.trip_created.Payment value) {
      validate(fields()[12], value);
      this.paymentBuilder = null;
      this.payment = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'payment' field has been set.
      * @return True if the 'payment' field has been set, false otherwise.
      */
    public boolean hasPayment() {
      return fieldSetFlags()[12];
    }

    /**
     * Gets the Builder instance for the 'payment' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Payment.Builder getPaymentBuilder() {
      if (paymentBuilder == null) {
        if (hasPayment()) {
          setPaymentBuilder(com.pickme.events.trip.trip_created.Payment.newBuilder(payment));
        } else {
          setPaymentBuilder(com.pickme.events.trip.trip_created.Payment.newBuilder());
        }
      }
      return paymentBuilder;
    }

    /**
     * Sets the Builder instance for the 'payment' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Body.Builder setPaymentBuilder(com.pickme.events.trip.trip_created.Payment.Builder value) {
      clearPayment();
      paymentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'payment' field has an active Builder instance
     * @return True if the 'payment' field has an active Builder instance
     */
    public boolean hasPaymentBuilder() {
      return paymentBuilder != null;
    }

    /**
      * Clears the value of the 'payment' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearPayment() {
      payment = null;
      paymentBuilder = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'comments' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_created.Comments getComments() {
      return comments;
    }

    /**
      * Sets the value of the 'comments' field.
      * @param value The value of 'comments'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setComments(com.pickme.events.trip.trip_created.Comments value) {
      validate(fields()[13], value);
      this.commentsBuilder = null;
      this.comments = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'comments' field has been set.
      * @return True if the 'comments' field has been set, false otherwise.
      */
    public boolean hasComments() {
      return fieldSetFlags()[13];
    }

    /**
     * Gets the Builder instance for the 'comments' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Comments.Builder getCommentsBuilder() {
      if (commentsBuilder == null) {
        if (hasComments()) {
          setCommentsBuilder(com.pickme.events.trip.trip_created.Comments.newBuilder(comments));
        } else {
          setCommentsBuilder(com.pickme.events.trip.trip_created.Comments.newBuilder());
        }
      }
      return commentsBuilder;
    }

    /**
     * Sets the Builder instance for the 'comments' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Body.Builder setCommentsBuilder(com.pickme.events.trip.trip_created.Comments.Builder value) {
      clearComments();
      commentsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'comments' field has an active Builder instance
     * @return True if the 'comments' field has an active Builder instance
     */
    public boolean hasCommentsBuilder() {
      return commentsBuilder != null;
    }

    /**
      * Clears the value of the 'comments' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearComments() {
      comments = null;
      commentsBuilder = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'filters' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_created.Filters getFilters() {
      return filters;
    }

    /**
      * Sets the value of the 'filters' field.
      * @param value The value of 'filters'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setFilters(com.pickme.events.trip.trip_created.Filters value) {
      validate(fields()[14], value);
      this.filtersBuilder = null;
      this.filters = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'filters' field has been set.
      * @return True if the 'filters' field has been set, false otherwise.
      */
    public boolean hasFilters() {
      return fieldSetFlags()[14];
    }

    /**
     * Gets the Builder instance for the 'filters' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Filters.Builder getFiltersBuilder() {
      if (filtersBuilder == null) {
        if (hasFilters()) {
          setFiltersBuilder(com.pickme.events.trip.trip_created.Filters.newBuilder(filters));
        } else {
          setFiltersBuilder(com.pickme.events.trip.trip_created.Filters.newBuilder());
        }
      }
      return filtersBuilder;
    }

    /**
     * Sets the Builder instance for the 'filters' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Body.Builder setFiltersBuilder(com.pickme.events.trip.trip_created.Filters.Builder value) {
      clearFilters();
      filtersBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'filters' field has an active Builder instance
     * @return True if the 'filters' field has an active Builder instance
     */
    public boolean hasFiltersBuilder() {
      return filtersBuilder != null;
    }

    /**
      * Clears the value of the 'filters' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearFilters() {
      filters = null;
      filtersBuilder = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'surge' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_created.Surge getSurge() {
      return surge;
    }

    /**
      * Sets the value of the 'surge' field.
      * @param value The value of 'surge'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setSurge(com.pickme.events.trip.trip_created.Surge value) {
      validate(fields()[15], value);
      this.surgeBuilder = null;
      this.surge = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'surge' field has been set.
      * @return True if the 'surge' field has been set, false otherwise.
      */
    public boolean hasSurge() {
      return fieldSetFlags()[15];
    }

    /**
     * Gets the Builder instance for the 'surge' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Surge.Builder getSurgeBuilder() {
      if (surgeBuilder == null) {
        if (hasSurge()) {
          setSurgeBuilder(com.pickme.events.trip.trip_created.Surge.newBuilder(surge));
        } else {
          setSurgeBuilder(com.pickme.events.trip.trip_created.Surge.newBuilder());
        }
      }
      return surgeBuilder;
    }

    /**
     * Sets the Builder instance for the 'surge' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Body.Builder setSurgeBuilder(com.pickme.events.trip.trip_created.Surge.Builder value) {
      clearSurge();
      surgeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'surge' field has an active Builder instance
     * @return True if the 'surge' field has an active Builder instance
     */
    public boolean hasSurgeBuilder() {
      return surgeBuilder != null;
    }

    /**
      * Clears the value of the 'surge' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearSurge() {
      surge = null;
      surgeBuilder = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'fare_details' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_created.FareDetails getFareDetails() {
      return fare_details;
    }

    /**
      * Sets the value of the 'fare_details' field.
      * @param value The value of 'fare_details'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder setFareDetails(com.pickme.events.trip.trip_created.FareDetails value) {
      validate(fields()[16], value);
      this.fare_detailsBuilder = null;
      this.fare_details = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'fare_details' field has been set.
      * @return True if the 'fare_details' field has been set, false otherwise.
      */
    public boolean hasFareDetails() {
      return fieldSetFlags()[16];
    }

    /**
     * Gets the Builder instance for the 'fare_details' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.FareDetails.Builder getFareDetailsBuilder() {
      if (fare_detailsBuilder == null) {
        if (hasFareDetails()) {
          setFareDetailsBuilder(com.pickme.events.trip.trip_created.FareDetails.newBuilder(fare_details));
        } else {
          setFareDetailsBuilder(com.pickme.events.trip.trip_created.FareDetails.newBuilder());
        }
      }
      return fare_detailsBuilder;
    }

    /**
     * Sets the Builder instance for the 'fare_details' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_created.Body.Builder setFareDetailsBuilder(com.pickme.events.trip.trip_created.FareDetails.Builder value) {
      clearFareDetails();
      fare_detailsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'fare_details' field has an active Builder instance
     * @return True if the 'fare_details' field has an active Builder instance
     */
    public boolean hasFareDetailsBuilder() {
      return fare_detailsBuilder != null;
    }

    /**
      * Clears the value of the 'fare_details' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_created.Body.Builder clearFareDetails() {
      fare_details = null;
      fare_detailsBuilder = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Body build() {
      try {
        Body record = new Body();
        record.module = fieldSetFlags()[0] ? this.module : (java.lang.Integer) defaultValue(fields()[0]);
        record.booked_by = fieldSetFlags()[1] ? this.booked_by : (java.lang.Integer) defaultValue(fields()[1]);
        record.trip_id = fieldSetFlags()[2] ? this.trip_id : (java.lang.Integer) defaultValue(fields()[2]);
        record.vehicle_type = fieldSetFlags()[3] ? this.vehicle_type : (java.lang.Integer) defaultValue(fields()[3]);
        record.pre_booking = fieldSetFlags()[4] ? this.pre_booking : (java.lang.Boolean) defaultValue(fields()[4]);
        if (passengerBuilder != null) {
          record.passenger = this.passengerBuilder.build();
        } else {
          record.passenger = fieldSetFlags()[5] ? this.passenger : (com.pickme.events.trip.trip_created.Passenger) defaultValue(fields()[5]);
        }
        if (driverBuilder != null) {
          record.driver = this.driverBuilder.build();
        } else {
          record.driver = fieldSetFlags()[6] ? this.driver : (com.pickme.events.trip.trip_created.Driver) defaultValue(fields()[6]);
        }
        if (corporateBuilder != null) {
          record.corporate = this.corporateBuilder.build();
        } else {
          record.corporate = fieldSetFlags()[7] ? this.corporate : (com.pickme.events.trip.trip_created.Corporate) defaultValue(fields()[7]);
        }
        if (pickupBuilder != null) {
          record.pickup = this.pickupBuilder.build();
        } else {
          record.pickup = fieldSetFlags()[8] ? this.pickup : (com.pickme.events.trip.trip_created.Pickup) defaultValue(fields()[8]);
        }
        if (dropBuilder != null) {
          record.drop = this.dropBuilder.build();
        } else {
          record.drop = fieldSetFlags()[9] ? this.drop : (com.pickme.events.trip.trip_created.Drop) defaultValue(fields()[9]);
        }
        if (promotionBuilder != null) {
          record.promotion = this.promotionBuilder.build();
        } else {
          record.promotion = fieldSetFlags()[10] ? this.promotion : (com.pickme.events.trip.trip_created.Promotion) defaultValue(fields()[10]);
        }
        if (regionBuilder != null) {
          record.region = this.regionBuilder.build();
        } else {
          record.region = fieldSetFlags()[11] ? this.region : (com.pickme.events.trip.trip_created.Region) defaultValue(fields()[11]);
        }
        if (paymentBuilder != null) {
          record.payment = this.paymentBuilder.build();
        } else {
          record.payment = fieldSetFlags()[12] ? this.payment : (com.pickme.events.trip.trip_created.Payment) defaultValue(fields()[12]);
        }
        if (commentsBuilder != null) {
          record.comments = this.commentsBuilder.build();
        } else {
          record.comments = fieldSetFlags()[13] ? this.comments : (com.pickme.events.trip.trip_created.Comments) defaultValue(fields()[13]);
        }
        if (filtersBuilder != null) {
          record.filters = this.filtersBuilder.build();
        } else {
          record.filters = fieldSetFlags()[14] ? this.filters : (com.pickme.events.trip.trip_created.Filters) defaultValue(fields()[14]);
        }
        if (surgeBuilder != null) {
          record.surge = this.surgeBuilder.build();
        } else {
          record.surge = fieldSetFlags()[15] ? this.surge : (com.pickme.events.trip.trip_created.Surge) defaultValue(fields()[15]);
        }
        if (fare_detailsBuilder != null) {
          record.fare_details = this.fare_detailsBuilder.build();
        } else {
          record.fare_details = fieldSetFlags()[16] ? this.fare_details : (com.pickme.events.trip.trip_created.FareDetails) defaultValue(fields()[16]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Body>
    WRITER$ = (org.apache.avro.io.DatumWriter<Body>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Body>
    READER$ = (org.apache.avro.io.DatumReader<Body>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

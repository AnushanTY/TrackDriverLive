/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pickme.events.trip.trip_ended;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MeterDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6235692409751451790L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MeterDetails\",\"namespace\":\"com.pickme.events.trip.trip_ended\",\"fields\":[{\"name\":\"travel_details\",\"type\":{\"type\":\"record\",\"name\":\"TravelDetails\",\"fields\":[{\"name\":\"distance_travelled\",\"type\":\"int\"},{\"name\":\"waiting_time\",\"type\":\"int\"}]}},{\"name\":\"fare_details\",\"type\":{\"type\":\"record\",\"name\":\"FareDetails\",\"fields\":[{\"name\":\"distance_fare\",\"type\":\"float\"},{\"name\":\"waiting_fare\",\"type\":\"float\"},{\"name\":\"night_fare\",\"type\":\"float\"},{\"name\":\"day_night_switching_cost\",\"type\":\"float\"},{\"name\":\"meter_total_fare\",\"type\":\"float\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MeterDetails> ENCODER =
      new BinaryMessageEncoder<MeterDetails>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MeterDetails> DECODER =
      new BinaryMessageDecoder<MeterDetails>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MeterDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MeterDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MeterDetails>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MeterDetails to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MeterDetails from a ByteBuffer. */
  public static MeterDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public com.pickme.events.trip.trip_ended.TravelDetails travel_details;
  @Deprecated public com.pickme.events.trip.trip_ended.FareDetails fare_details;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MeterDetails() {}

  /**
   * All-args constructor.
   * @param travel_details The new value for travel_details
   * @param fare_details The new value for fare_details
   */
  public MeterDetails(com.pickme.events.trip.trip_ended.TravelDetails travel_details, com.pickme.events.trip.trip_ended.FareDetails fare_details) {
    this.travel_details = travel_details;
    this.fare_details = fare_details;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return travel_details;
    case 1: return fare_details;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: travel_details = (com.pickme.events.trip.trip_ended.TravelDetails)value$; break;
    case 1: fare_details = (com.pickme.events.trip.trip_ended.FareDetails)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'travel_details' field.
   * @return The value of the 'travel_details' field.
   */
  public com.pickme.events.trip.trip_ended.TravelDetails getTravelDetails() {
    return travel_details;
  }

  /**
   * Sets the value of the 'travel_details' field.
   * @param value the value to set.
   */
  public void setTravelDetails(com.pickme.events.trip.trip_ended.TravelDetails value) {
    this.travel_details = value;
  }

  /**
   * Gets the value of the 'fare_details' field.
   * @return The value of the 'fare_details' field.
   */
  public com.pickme.events.trip.trip_ended.FareDetails getFareDetails() {
    return fare_details;
  }

  /**
   * Sets the value of the 'fare_details' field.
   * @param value the value to set.
   */
  public void setFareDetails(com.pickme.events.trip.trip_ended.FareDetails value) {
    this.fare_details = value;
  }

  /**
   * Creates a new MeterDetails RecordBuilder.
   * @return A new MeterDetails RecordBuilder
   */
  public static com.pickme.events.trip.trip_ended.MeterDetails.Builder newBuilder() {
    return new com.pickme.events.trip.trip_ended.MeterDetails.Builder();
  }

  /**
   * Creates a new MeterDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MeterDetails RecordBuilder
   */
  public static com.pickme.events.trip.trip_ended.MeterDetails.Builder newBuilder(com.pickme.events.trip.trip_ended.MeterDetails.Builder other) {
    return new com.pickme.events.trip.trip_ended.MeterDetails.Builder(other);
  }

  /**
   * Creates a new MeterDetails RecordBuilder by copying an existing MeterDetails instance.
   * @param other The existing instance to copy.
   * @return A new MeterDetails RecordBuilder
   */
  public static com.pickme.events.trip.trip_ended.MeterDetails.Builder newBuilder(com.pickme.events.trip.trip_ended.MeterDetails other) {
    return new com.pickme.events.trip.trip_ended.MeterDetails.Builder(other);
  }

  /**
   * RecordBuilder for MeterDetails instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MeterDetails>
    implements org.apache.avro.data.RecordBuilder<MeterDetails> {

    private com.pickme.events.trip.trip_ended.TravelDetails travel_details;
    private com.pickme.events.trip.trip_ended.TravelDetails.Builder travel_detailsBuilder;
    private com.pickme.events.trip.trip_ended.FareDetails fare_details;
    private com.pickme.events.trip.trip_ended.FareDetails.Builder fare_detailsBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pickme.events.trip.trip_ended.MeterDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.travel_details)) {
        this.travel_details = data().deepCopy(fields()[0].schema(), other.travel_details);
        fieldSetFlags()[0] = true;
      }
      if (other.hasTravelDetailsBuilder()) {
        this.travel_detailsBuilder = com.pickme.events.trip.trip_ended.TravelDetails.newBuilder(other.getTravelDetailsBuilder());
      }
      if (isValidValue(fields()[1], other.fare_details)) {
        this.fare_details = data().deepCopy(fields()[1].schema(), other.fare_details);
        fieldSetFlags()[1] = true;
      }
      if (other.hasFareDetailsBuilder()) {
        this.fare_detailsBuilder = com.pickme.events.trip.trip_ended.FareDetails.newBuilder(other.getFareDetailsBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing MeterDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pickme.events.trip.trip_ended.MeterDetails other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.travel_details)) {
        this.travel_details = data().deepCopy(fields()[0].schema(), other.travel_details);
        fieldSetFlags()[0] = true;
      }
      this.travel_detailsBuilder = null;
      if (isValidValue(fields()[1], other.fare_details)) {
        this.fare_details = data().deepCopy(fields()[1].schema(), other.fare_details);
        fieldSetFlags()[1] = true;
      }
      this.fare_detailsBuilder = null;
    }

    /**
      * Gets the value of the 'travel_details' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_ended.TravelDetails getTravelDetails() {
      return travel_details;
    }

    /**
      * Sets the value of the 'travel_details' field.
      * @param value The value of 'travel_details'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_ended.MeterDetails.Builder setTravelDetails(com.pickme.events.trip.trip_ended.TravelDetails value) {
      validate(fields()[0], value);
      this.travel_detailsBuilder = null;
      this.travel_details = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'travel_details' field has been set.
      * @return True if the 'travel_details' field has been set, false otherwise.
      */
    public boolean hasTravelDetails() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'travel_details' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_ended.TravelDetails.Builder getTravelDetailsBuilder() {
      if (travel_detailsBuilder == null) {
        if (hasTravelDetails()) {
          setTravelDetailsBuilder(com.pickme.events.trip.trip_ended.TravelDetails.newBuilder(travel_details));
        } else {
          setTravelDetailsBuilder(com.pickme.events.trip.trip_ended.TravelDetails.newBuilder());
        }
      }
      return travel_detailsBuilder;
    }

    /**
     * Sets the Builder instance for the 'travel_details' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_ended.MeterDetails.Builder setTravelDetailsBuilder(com.pickme.events.trip.trip_ended.TravelDetails.Builder value) {
      clearTravelDetails();
      travel_detailsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'travel_details' field has an active Builder instance
     * @return True if the 'travel_details' field has an active Builder instance
     */
    public boolean hasTravelDetailsBuilder() {
      return travel_detailsBuilder != null;
    }

    /**
      * Clears the value of the 'travel_details' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_ended.MeterDetails.Builder clearTravelDetails() {
      travel_details = null;
      travel_detailsBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fare_details' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_ended.FareDetails getFareDetails() {
      return fare_details;
    }

    /**
      * Sets the value of the 'fare_details' field.
      * @param value The value of 'fare_details'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_ended.MeterDetails.Builder setFareDetails(com.pickme.events.trip.trip_ended.FareDetails value) {
      validate(fields()[1], value);
      this.fare_detailsBuilder = null;
      this.fare_details = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fare_details' field has been set.
      * @return True if the 'fare_details' field has been set, false otherwise.
      */
    public boolean hasFareDetails() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'fare_details' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_ended.FareDetails.Builder getFareDetailsBuilder() {
      if (fare_detailsBuilder == null) {
        if (hasFareDetails()) {
          setFareDetailsBuilder(com.pickme.events.trip.trip_ended.FareDetails.newBuilder(fare_details));
        } else {
          setFareDetailsBuilder(com.pickme.events.trip.trip_ended.FareDetails.newBuilder());
        }
      }
      return fare_detailsBuilder;
    }

    /**
     * Sets the Builder instance for the 'fare_details' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_ended.MeterDetails.Builder setFareDetailsBuilder(com.pickme.events.trip.trip_ended.FareDetails.Builder value) {
      clearFareDetails();
      fare_detailsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'fare_details' field has an active Builder instance
     * @return True if the 'fare_details' field has an active Builder instance
     */
    public boolean hasFareDetailsBuilder() {
      return fare_detailsBuilder != null;
    }

    /**
      * Clears the value of the 'fare_details' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_ended.MeterDetails.Builder clearFareDetails() {
      fare_details = null;
      fare_detailsBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MeterDetails build() {
      try {
        MeterDetails record = new MeterDetails();
        if (travel_detailsBuilder != null) {
          record.travel_details = this.travel_detailsBuilder.build();
        } else {
          record.travel_details = fieldSetFlags()[0] ? this.travel_details : (com.pickme.events.trip.trip_ended.TravelDetails) defaultValue(fields()[0]);
        }
        if (fare_detailsBuilder != null) {
          record.fare_details = this.fare_detailsBuilder.build();
        } else {
          record.fare_details = fieldSetFlags()[1] ? this.fare_details : (com.pickme.events.trip.trip_ended.FareDetails) defaultValue(fields()[1]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MeterDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<MeterDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MeterDetails>
    READER$ = (org.apache.avro.io.DatumReader<MeterDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

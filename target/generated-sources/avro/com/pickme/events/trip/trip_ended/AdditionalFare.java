/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pickme.events.trip.trip_ended;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AdditionalFare extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2701359269052547789L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AdditionalFare\",\"namespace\":\"com.pickme.events.trip.trip_ended\",\"fields\":[{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"float\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AdditionalFare> ENCODER =
      new BinaryMessageEncoder<AdditionalFare>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AdditionalFare> DECODER =
      new BinaryMessageDecoder<AdditionalFare>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AdditionalFare> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AdditionalFare> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AdditionalFare>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AdditionalFare to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AdditionalFare from a ByteBuffer. */
  public static AdditionalFare fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence code;
  @Deprecated public float amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AdditionalFare() {}

  /**
   * All-args constructor.
   * @param code The new value for code
   * @param amount The new value for amount
   */
  public AdditionalFare(java.lang.CharSequence code, java.lang.Float amount) {
    this.code = code;
    this.amount = amount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return code;
    case 1: return amount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: code = (java.lang.CharSequence)value$; break;
    case 1: amount = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Float getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Float value) {
    this.amount = value;
  }

  /**
   * Creates a new AdditionalFare RecordBuilder.
   * @return A new AdditionalFare RecordBuilder
   */
  public static com.pickme.events.trip.trip_ended.AdditionalFare.Builder newBuilder() {
    return new com.pickme.events.trip.trip_ended.AdditionalFare.Builder();
  }

  /**
   * Creates a new AdditionalFare RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AdditionalFare RecordBuilder
   */
  public static com.pickme.events.trip.trip_ended.AdditionalFare.Builder newBuilder(com.pickme.events.trip.trip_ended.AdditionalFare.Builder other) {
    return new com.pickme.events.trip.trip_ended.AdditionalFare.Builder(other);
  }

  /**
   * Creates a new AdditionalFare RecordBuilder by copying an existing AdditionalFare instance.
   * @param other The existing instance to copy.
   * @return A new AdditionalFare RecordBuilder
   */
  public static com.pickme.events.trip.trip_ended.AdditionalFare.Builder newBuilder(com.pickme.events.trip.trip_ended.AdditionalFare other) {
    return new com.pickme.events.trip.trip_ended.AdditionalFare.Builder(other);
  }

  /**
   * RecordBuilder for AdditionalFare instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AdditionalFare>
    implements org.apache.avro.data.RecordBuilder<AdditionalFare> {

    private java.lang.CharSequence code;
    private float amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pickme.events.trip.trip_ended.AdditionalFare.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AdditionalFare instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pickme.events.trip.trip_ended.AdditionalFare other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.code)) {
        this.code = data().deepCopy(fields()[0].schema(), other.code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_ended.AdditionalFare.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.code = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_ended.AdditionalFare.Builder clearCode() {
      code = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Float getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_ended.AdditionalFare.Builder setAmount(float value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_ended.AdditionalFare.Builder clearAmount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AdditionalFare build() {
      try {
        AdditionalFare record = new AdditionalFare();
        record.code = fieldSetFlags()[0] ? this.code : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.amount = fieldSetFlags()[1] ? this.amount : (java.lang.Float) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AdditionalFare>
    WRITER$ = (org.apache.avro.io.DatumWriter<AdditionalFare>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AdditionalFare>
    READER$ = (org.apache.avro.io.DatumReader<AdditionalFare>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pickme.events.trip.trip_completed;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Corporate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -334566498686689728L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Corporate\",\"namespace\":\"com.pickme.events.trip.trip_completed\",\"fields\":[{\"name\":\"company_id\",\"type\":\"int\"},{\"name\":\"department_id\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Corporate> ENCODER =
      new BinaryMessageEncoder<Corporate>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Corporate> DECODER =
      new BinaryMessageDecoder<Corporate>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Corporate> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Corporate> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Corporate>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Corporate to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Corporate from a ByteBuffer. */
  public static Corporate fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int company_id;
  @Deprecated public int department_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Corporate() {}

  /**
   * All-args constructor.
   * @param company_id The new value for company_id
   * @param department_id The new value for department_id
   */
  public Corporate(java.lang.Integer company_id, java.lang.Integer department_id) {
    this.company_id = company_id;
    this.department_id = department_id;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return company_id;
    case 1: return department_id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: company_id = (java.lang.Integer)value$; break;
    case 1: department_id = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'company_id' field.
   * @return The value of the 'company_id' field.
   */
  public java.lang.Integer getCompanyId() {
    return company_id;
  }

  /**
   * Sets the value of the 'company_id' field.
   * @param value the value to set.
   */
  public void setCompanyId(java.lang.Integer value) {
    this.company_id = value;
  }

  /**
   * Gets the value of the 'department_id' field.
   * @return The value of the 'department_id' field.
   */
  public java.lang.Integer getDepartmentId() {
    return department_id;
  }

  /**
   * Sets the value of the 'department_id' field.
   * @param value the value to set.
   */
  public void setDepartmentId(java.lang.Integer value) {
    this.department_id = value;
  }

  /**
   * Creates a new Corporate RecordBuilder.
   * @return A new Corporate RecordBuilder
   */
  public static com.pickme.events.trip.trip_completed.Corporate.Builder newBuilder() {
    return new com.pickme.events.trip.trip_completed.Corporate.Builder();
  }

  /**
   * Creates a new Corporate RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Corporate RecordBuilder
   */
  public static com.pickme.events.trip.trip_completed.Corporate.Builder newBuilder(com.pickme.events.trip.trip_completed.Corporate.Builder other) {
    return new com.pickme.events.trip.trip_completed.Corporate.Builder(other);
  }

  /**
   * Creates a new Corporate RecordBuilder by copying an existing Corporate instance.
   * @param other The existing instance to copy.
   * @return A new Corporate RecordBuilder
   */
  public static com.pickme.events.trip.trip_completed.Corporate.Builder newBuilder(com.pickme.events.trip.trip_completed.Corporate other) {
    return new com.pickme.events.trip.trip_completed.Corporate.Builder(other);
  }

  /**
   * RecordBuilder for Corporate instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Corporate>
    implements org.apache.avro.data.RecordBuilder<Corporate> {

    private int company_id;
    private int department_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pickme.events.trip.trip_completed.Corporate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.company_id)) {
        this.company_id = data().deepCopy(fields()[0].schema(), other.company_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.department_id)) {
        this.department_id = data().deepCopy(fields()[1].schema(), other.department_id);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Corporate instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pickme.events.trip.trip_completed.Corporate other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.company_id)) {
        this.company_id = data().deepCopy(fields()[0].schema(), other.company_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.department_id)) {
        this.department_id = data().deepCopy(fields()[1].schema(), other.department_id);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'company_id' field.
      * @return The value.
      */
    public java.lang.Integer getCompanyId() {
      return company_id;
    }

    /**
      * Sets the value of the 'company_id' field.
      * @param value The value of 'company_id'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Corporate.Builder setCompanyId(int value) {
      validate(fields()[0], value);
      this.company_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'company_id' field has been set.
      * @return True if the 'company_id' field has been set, false otherwise.
      */
    public boolean hasCompanyId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'company_id' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Corporate.Builder clearCompanyId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'department_id' field.
      * @return The value.
      */
    public java.lang.Integer getDepartmentId() {
      return department_id;
    }

    /**
      * Sets the value of the 'department_id' field.
      * @param value The value of 'department_id'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Corporate.Builder setDepartmentId(int value) {
      validate(fields()[1], value);
      this.department_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'department_id' field has been set.
      * @return True if the 'department_id' field has been set, false otherwise.
      */
    public boolean hasDepartmentId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'department_id' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Corporate.Builder clearDepartmentId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Corporate build() {
      try {
        Corporate record = new Corporate();
        record.company_id = fieldSetFlags()[0] ? this.company_id : (java.lang.Integer) defaultValue(fields()[0]);
        record.department_id = fieldSetFlags()[1] ? this.department_id : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Corporate>
    WRITER$ = (org.apache.avro.io.DatumWriter<Corporate>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Corporate>
    READER$ = (org.apache.avro.io.DatumReader<Corporate>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pickme.events.trip.trip_completed;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Trip extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3205987071950128158L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Trip\",\"namespace\":\"com.pickme.events.trip.trip_completed\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"booked_by\",\"type\":\"int\"},{\"name\":\"distance\",\"type\":\"int\"},{\"name\":\"trip_cost\",\"type\":\"float\"},{\"name\":\"flags\",\"type\":{\"type\":\"record\",\"name\":\"Flags\",\"fields\":[{\"name\":\"itc\",\"type\":\"boolean\"}]}},{\"name\":\"payment\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Payment\",\"fields\":[{\"name\":\"method\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"float\"}]}}},{\"name\":\"discount\",\"type\":\"float\"},{\"name\":\"promo_code\",\"type\":\"string\"},{\"name\":\"corporate\",\"type\":{\"type\":\"record\",\"name\":\"Corporate\",\"fields\":[{\"name\":\"company_id\",\"type\":\"int\"},{\"name\":\"department_id\",\"type\":\"int\"}]}},{\"name\":\"actual_pickup\",\"type\":{\"type\":\"record\",\"name\":\"ActualPickup\",\"fields\":[{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"lat\",\"type\":\"float\"},{\"name\":\"lng\",\"type\":\"float\"}]}},{\"name\":\"actual_drop\",\"type\":{\"type\":\"record\",\"name\":\"ActualDrop\",\"fields\":[{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"lat\",\"type\":\"float\"},{\"name\":\"lng\",\"type\":\"float\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Trip> ENCODER =
      new BinaryMessageEncoder<Trip>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Trip> DECODER =
      new BinaryMessageDecoder<Trip>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Trip> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Trip> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Trip>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Trip to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Trip from a ByteBuffer. */
  public static Trip fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int id;
  @Deprecated public int booked_by;
  @Deprecated public int distance;
  @Deprecated public float trip_cost;
  @Deprecated public com.pickme.events.trip.trip_completed.Flags flags;
  @Deprecated public java.util.List<com.pickme.events.trip.trip_completed.Payment> payment;
  @Deprecated public float discount;
  @Deprecated public java.lang.CharSequence promo_code;
  @Deprecated public com.pickme.events.trip.trip_completed.Corporate corporate;
  @Deprecated public com.pickme.events.trip.trip_completed.ActualPickup actual_pickup;
  @Deprecated public com.pickme.events.trip.trip_completed.ActualDrop actual_drop;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Trip() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param booked_by The new value for booked_by
   * @param distance The new value for distance
   * @param trip_cost The new value for trip_cost
   * @param flags The new value for flags
   * @param payment The new value for payment
   * @param discount The new value for discount
   * @param promo_code The new value for promo_code
   * @param corporate The new value for corporate
   * @param actual_pickup The new value for actual_pickup
   * @param actual_drop The new value for actual_drop
   */
  public Trip(java.lang.Integer id, java.lang.Integer booked_by, java.lang.Integer distance, java.lang.Float trip_cost, com.pickme.events.trip.trip_completed.Flags flags, java.util.List<com.pickme.events.trip.trip_completed.Payment> payment, java.lang.Float discount, java.lang.CharSequence promo_code, com.pickme.events.trip.trip_completed.Corporate corporate, com.pickme.events.trip.trip_completed.ActualPickup actual_pickup, com.pickme.events.trip.trip_completed.ActualDrop actual_drop) {
    this.id = id;
    this.booked_by = booked_by;
    this.distance = distance;
    this.trip_cost = trip_cost;
    this.flags = flags;
    this.payment = payment;
    this.discount = discount;
    this.promo_code = promo_code;
    this.corporate = corporate;
    this.actual_pickup = actual_pickup;
    this.actual_drop = actual_drop;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return booked_by;
    case 2: return distance;
    case 3: return trip_cost;
    case 4: return flags;
    case 5: return payment;
    case 6: return discount;
    case 7: return promo_code;
    case 8: return corporate;
    case 9: return actual_pickup;
    case 10: return actual_drop;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: booked_by = (java.lang.Integer)value$; break;
    case 2: distance = (java.lang.Integer)value$; break;
    case 3: trip_cost = (java.lang.Float)value$; break;
    case 4: flags = (com.pickme.events.trip.trip_completed.Flags)value$; break;
    case 5: payment = (java.util.List<com.pickme.events.trip.trip_completed.Payment>)value$; break;
    case 6: discount = (java.lang.Float)value$; break;
    case 7: promo_code = (java.lang.CharSequence)value$; break;
    case 8: corporate = (com.pickme.events.trip.trip_completed.Corporate)value$; break;
    case 9: actual_pickup = (com.pickme.events.trip.trip_completed.ActualPickup)value$; break;
    case 10: actual_drop = (com.pickme.events.trip.trip_completed.ActualDrop)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'booked_by' field.
   * @return The value of the 'booked_by' field.
   */
  public java.lang.Integer getBookedBy() {
    return booked_by;
  }

  /**
   * Sets the value of the 'booked_by' field.
   * @param value the value to set.
   */
  public void setBookedBy(java.lang.Integer value) {
    this.booked_by = value;
  }

  /**
   * Gets the value of the 'distance' field.
   * @return The value of the 'distance' field.
   */
  public java.lang.Integer getDistance() {
    return distance;
  }

  /**
   * Sets the value of the 'distance' field.
   * @param value the value to set.
   */
  public void setDistance(java.lang.Integer value) {
    this.distance = value;
  }

  /**
   * Gets the value of the 'trip_cost' field.
   * @return The value of the 'trip_cost' field.
   */
  public java.lang.Float getTripCost() {
    return trip_cost;
  }

  /**
   * Sets the value of the 'trip_cost' field.
   * @param value the value to set.
   */
  public void setTripCost(java.lang.Float value) {
    this.trip_cost = value;
  }

  /**
   * Gets the value of the 'flags' field.
   * @return The value of the 'flags' field.
   */
  public com.pickme.events.trip.trip_completed.Flags getFlags() {
    return flags;
  }

  /**
   * Sets the value of the 'flags' field.
   * @param value the value to set.
   */
  public void setFlags(com.pickme.events.trip.trip_completed.Flags value) {
    this.flags = value;
  }

  /**
   * Gets the value of the 'payment' field.
   * @return The value of the 'payment' field.
   */
  public java.util.List<com.pickme.events.trip.trip_completed.Payment> getPayment() {
    return payment;
  }

  /**
   * Sets the value of the 'payment' field.
   * @param value the value to set.
   */
  public void setPayment(java.util.List<com.pickme.events.trip.trip_completed.Payment> value) {
    this.payment = value;
  }

  /**
   * Gets the value of the 'discount' field.
   * @return The value of the 'discount' field.
   */
  public java.lang.Float getDiscount() {
    return discount;
  }

  /**
   * Sets the value of the 'discount' field.
   * @param value the value to set.
   */
  public void setDiscount(java.lang.Float value) {
    this.discount = value;
  }

  /**
   * Gets the value of the 'promo_code' field.
   * @return The value of the 'promo_code' field.
   */
  public java.lang.CharSequence getPromoCode() {
    return promo_code;
  }

  /**
   * Sets the value of the 'promo_code' field.
   * @param value the value to set.
   */
  public void setPromoCode(java.lang.CharSequence value) {
    this.promo_code = value;
  }

  /**
   * Gets the value of the 'corporate' field.
   * @return The value of the 'corporate' field.
   */
  public com.pickme.events.trip.trip_completed.Corporate getCorporate() {
    return corporate;
  }

  /**
   * Sets the value of the 'corporate' field.
   * @param value the value to set.
   */
  public void setCorporate(com.pickme.events.trip.trip_completed.Corporate value) {
    this.corporate = value;
  }

  /**
   * Gets the value of the 'actual_pickup' field.
   * @return The value of the 'actual_pickup' field.
   */
  public com.pickme.events.trip.trip_completed.ActualPickup getActualPickup() {
    return actual_pickup;
  }

  /**
   * Sets the value of the 'actual_pickup' field.
   * @param value the value to set.
   */
  public void setActualPickup(com.pickme.events.trip.trip_completed.ActualPickup value) {
    this.actual_pickup = value;
  }

  /**
   * Gets the value of the 'actual_drop' field.
   * @return The value of the 'actual_drop' field.
   */
  public com.pickme.events.trip.trip_completed.ActualDrop getActualDrop() {
    return actual_drop;
  }

  /**
   * Sets the value of the 'actual_drop' field.
   * @param value the value to set.
   */
  public void setActualDrop(com.pickme.events.trip.trip_completed.ActualDrop value) {
    this.actual_drop = value;
  }

  /**
   * Creates a new Trip RecordBuilder.
   * @return A new Trip RecordBuilder
   */
  public static com.pickme.events.trip.trip_completed.Trip.Builder newBuilder() {
    return new com.pickme.events.trip.trip_completed.Trip.Builder();
  }

  /**
   * Creates a new Trip RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Trip RecordBuilder
   */
  public static com.pickme.events.trip.trip_completed.Trip.Builder newBuilder(com.pickme.events.trip.trip_completed.Trip.Builder other) {
    return new com.pickme.events.trip.trip_completed.Trip.Builder(other);
  }

  /**
   * Creates a new Trip RecordBuilder by copying an existing Trip instance.
   * @param other The existing instance to copy.
   * @return A new Trip RecordBuilder
   */
  public static com.pickme.events.trip.trip_completed.Trip.Builder newBuilder(com.pickme.events.trip.trip_completed.Trip other) {
    return new com.pickme.events.trip.trip_completed.Trip.Builder(other);
  }

  /**
   * RecordBuilder for Trip instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Trip>
    implements org.apache.avro.data.RecordBuilder<Trip> {

    private int id;
    private int booked_by;
    private int distance;
    private float trip_cost;
    private com.pickme.events.trip.trip_completed.Flags flags;
    private com.pickme.events.trip.trip_completed.Flags.Builder flagsBuilder;
    private java.util.List<com.pickme.events.trip.trip_completed.Payment> payment;
    private float discount;
    private java.lang.CharSequence promo_code;
    private com.pickme.events.trip.trip_completed.Corporate corporate;
    private com.pickme.events.trip.trip_completed.Corporate.Builder corporateBuilder;
    private com.pickme.events.trip.trip_completed.ActualPickup actual_pickup;
    private com.pickme.events.trip.trip_completed.ActualPickup.Builder actual_pickupBuilder;
    private com.pickme.events.trip.trip_completed.ActualDrop actual_drop;
    private com.pickme.events.trip.trip_completed.ActualDrop.Builder actual_dropBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pickme.events.trip.trip_completed.Trip.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.booked_by)) {
        this.booked_by = data().deepCopy(fields()[1].schema(), other.booked_by);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.distance)) {
        this.distance = data().deepCopy(fields()[2].schema(), other.distance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.trip_cost)) {
        this.trip_cost = data().deepCopy(fields()[3].schema(), other.trip_cost);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.flags)) {
        this.flags = data().deepCopy(fields()[4].schema(), other.flags);
        fieldSetFlags()[4] = true;
      }
      if (other.hasFlagsBuilder()) {
        this.flagsBuilder = com.pickme.events.trip.trip_completed.Flags.newBuilder(other.getFlagsBuilder());
      }
      if (isValidValue(fields()[5], other.payment)) {
        this.payment = data().deepCopy(fields()[5].schema(), other.payment);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.discount)) {
        this.discount = data().deepCopy(fields()[6].schema(), other.discount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.promo_code)) {
        this.promo_code = data().deepCopy(fields()[7].schema(), other.promo_code);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.corporate)) {
        this.corporate = data().deepCopy(fields()[8].schema(), other.corporate);
        fieldSetFlags()[8] = true;
      }
      if (other.hasCorporateBuilder()) {
        this.corporateBuilder = com.pickme.events.trip.trip_completed.Corporate.newBuilder(other.getCorporateBuilder());
      }
      if (isValidValue(fields()[9], other.actual_pickup)) {
        this.actual_pickup = data().deepCopy(fields()[9].schema(), other.actual_pickup);
        fieldSetFlags()[9] = true;
      }
      if (other.hasActualPickupBuilder()) {
        this.actual_pickupBuilder = com.pickme.events.trip.trip_completed.ActualPickup.newBuilder(other.getActualPickupBuilder());
      }
      if (isValidValue(fields()[10], other.actual_drop)) {
        this.actual_drop = data().deepCopy(fields()[10].schema(), other.actual_drop);
        fieldSetFlags()[10] = true;
      }
      if (other.hasActualDropBuilder()) {
        this.actual_dropBuilder = com.pickme.events.trip.trip_completed.ActualDrop.newBuilder(other.getActualDropBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Trip instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pickme.events.trip.trip_completed.Trip other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.booked_by)) {
        this.booked_by = data().deepCopy(fields()[1].schema(), other.booked_by);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.distance)) {
        this.distance = data().deepCopy(fields()[2].schema(), other.distance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.trip_cost)) {
        this.trip_cost = data().deepCopy(fields()[3].schema(), other.trip_cost);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.flags)) {
        this.flags = data().deepCopy(fields()[4].schema(), other.flags);
        fieldSetFlags()[4] = true;
      }
      this.flagsBuilder = null;
      if (isValidValue(fields()[5], other.payment)) {
        this.payment = data().deepCopy(fields()[5].schema(), other.payment);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.discount)) {
        this.discount = data().deepCopy(fields()[6].schema(), other.discount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.promo_code)) {
        this.promo_code = data().deepCopy(fields()[7].schema(), other.promo_code);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.corporate)) {
        this.corporate = data().deepCopy(fields()[8].schema(), other.corporate);
        fieldSetFlags()[8] = true;
      }
      this.corporateBuilder = null;
      if (isValidValue(fields()[9], other.actual_pickup)) {
        this.actual_pickup = data().deepCopy(fields()[9].schema(), other.actual_pickup);
        fieldSetFlags()[9] = true;
      }
      this.actual_pickupBuilder = null;
      if (isValidValue(fields()[10], other.actual_drop)) {
        this.actual_drop = data().deepCopy(fields()[10].schema(), other.actual_drop);
        fieldSetFlags()[10] = true;
      }
      this.actual_dropBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'booked_by' field.
      * @return The value.
      */
    public java.lang.Integer getBookedBy() {
      return booked_by;
    }

    /**
      * Sets the value of the 'booked_by' field.
      * @param value The value of 'booked_by'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder setBookedBy(int value) {
      validate(fields()[1], value);
      this.booked_by = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'booked_by' field has been set.
      * @return True if the 'booked_by' field has been set, false otherwise.
      */
    public boolean hasBookedBy() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'booked_by' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder clearBookedBy() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'distance' field.
      * @return The value.
      */
    public java.lang.Integer getDistance() {
      return distance;
    }

    /**
      * Sets the value of the 'distance' field.
      * @param value The value of 'distance'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder setDistance(int value) {
      validate(fields()[2], value);
      this.distance = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'distance' field has been set.
      * @return True if the 'distance' field has been set, false otherwise.
      */
    public boolean hasDistance() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'distance' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder clearDistance() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'trip_cost' field.
      * @return The value.
      */
    public java.lang.Float getTripCost() {
      return trip_cost;
    }

    /**
      * Sets the value of the 'trip_cost' field.
      * @param value The value of 'trip_cost'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder setTripCost(float value) {
      validate(fields()[3], value);
      this.trip_cost = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'trip_cost' field has been set.
      * @return True if the 'trip_cost' field has been set, false otherwise.
      */
    public boolean hasTripCost() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'trip_cost' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder clearTripCost() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'flags' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_completed.Flags getFlags() {
      return flags;
    }

    /**
      * Sets the value of the 'flags' field.
      * @param value The value of 'flags'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder setFlags(com.pickme.events.trip.trip_completed.Flags value) {
      validate(fields()[4], value);
      this.flagsBuilder = null;
      this.flags = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'flags' field has been set.
      * @return True if the 'flags' field has been set, false otherwise.
      */
    public boolean hasFlags() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'flags' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_completed.Flags.Builder getFlagsBuilder() {
      if (flagsBuilder == null) {
        if (hasFlags()) {
          setFlagsBuilder(com.pickme.events.trip.trip_completed.Flags.newBuilder(flags));
        } else {
          setFlagsBuilder(com.pickme.events.trip.trip_completed.Flags.newBuilder());
        }
      }
      return flagsBuilder;
    }

    /**
     * Sets the Builder instance for the 'flags' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_completed.Trip.Builder setFlagsBuilder(com.pickme.events.trip.trip_completed.Flags.Builder value) {
      clearFlags();
      flagsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'flags' field has an active Builder instance
     * @return True if the 'flags' field has an active Builder instance
     */
    public boolean hasFlagsBuilder() {
      return flagsBuilder != null;
    }

    /**
      * Clears the value of the 'flags' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder clearFlags() {
      flags = null;
      flagsBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment' field.
      * @return The value.
      */
    public java.util.List<com.pickme.events.trip.trip_completed.Payment> getPayment() {
      return payment;
    }

    /**
      * Sets the value of the 'payment' field.
      * @param value The value of 'payment'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder setPayment(java.util.List<com.pickme.events.trip.trip_completed.Payment> value) {
      validate(fields()[5], value);
      this.payment = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'payment' field has been set.
      * @return True if the 'payment' field has been set, false otherwise.
      */
    public boolean hasPayment() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'payment' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder clearPayment() {
      payment = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'discount' field.
      * @return The value.
      */
    public java.lang.Float getDiscount() {
      return discount;
    }

    /**
      * Sets the value of the 'discount' field.
      * @param value The value of 'discount'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder setDiscount(float value) {
      validate(fields()[6], value);
      this.discount = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'discount' field has been set.
      * @return True if the 'discount' field has been set, false otherwise.
      */
    public boolean hasDiscount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'discount' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder clearDiscount() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'promo_code' field.
      * @return The value.
      */
    public java.lang.CharSequence getPromoCode() {
      return promo_code;
    }

    /**
      * Sets the value of the 'promo_code' field.
      * @param value The value of 'promo_code'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder setPromoCode(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.promo_code = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'promo_code' field has been set.
      * @return True if the 'promo_code' field has been set, false otherwise.
      */
    public boolean hasPromoCode() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'promo_code' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder clearPromoCode() {
      promo_code = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'corporate' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_completed.Corporate getCorporate() {
      return corporate;
    }

    /**
      * Sets the value of the 'corporate' field.
      * @param value The value of 'corporate'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder setCorporate(com.pickme.events.trip.trip_completed.Corporate value) {
      validate(fields()[8], value);
      this.corporateBuilder = null;
      this.corporate = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'corporate' field has been set.
      * @return True if the 'corporate' field has been set, false otherwise.
      */
    public boolean hasCorporate() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'corporate' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_completed.Corporate.Builder getCorporateBuilder() {
      if (corporateBuilder == null) {
        if (hasCorporate()) {
          setCorporateBuilder(com.pickme.events.trip.trip_completed.Corporate.newBuilder(corporate));
        } else {
          setCorporateBuilder(com.pickme.events.trip.trip_completed.Corporate.newBuilder());
        }
      }
      return corporateBuilder;
    }

    /**
     * Sets the Builder instance for the 'corporate' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_completed.Trip.Builder setCorporateBuilder(com.pickme.events.trip.trip_completed.Corporate.Builder value) {
      clearCorporate();
      corporateBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'corporate' field has an active Builder instance
     * @return True if the 'corporate' field has an active Builder instance
     */
    public boolean hasCorporateBuilder() {
      return corporateBuilder != null;
    }

    /**
      * Clears the value of the 'corporate' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder clearCorporate() {
      corporate = null;
      corporateBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'actual_pickup' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_completed.ActualPickup getActualPickup() {
      return actual_pickup;
    }

    /**
      * Sets the value of the 'actual_pickup' field.
      * @param value The value of 'actual_pickup'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder setActualPickup(com.pickme.events.trip.trip_completed.ActualPickup value) {
      validate(fields()[9], value);
      this.actual_pickupBuilder = null;
      this.actual_pickup = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'actual_pickup' field has been set.
      * @return True if the 'actual_pickup' field has been set, false otherwise.
      */
    public boolean hasActualPickup() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'actual_pickup' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_completed.ActualPickup.Builder getActualPickupBuilder() {
      if (actual_pickupBuilder == null) {
        if (hasActualPickup()) {
          setActualPickupBuilder(com.pickme.events.trip.trip_completed.ActualPickup.newBuilder(actual_pickup));
        } else {
          setActualPickupBuilder(com.pickme.events.trip.trip_completed.ActualPickup.newBuilder());
        }
      }
      return actual_pickupBuilder;
    }

    /**
     * Sets the Builder instance for the 'actual_pickup' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_completed.Trip.Builder setActualPickupBuilder(com.pickme.events.trip.trip_completed.ActualPickup.Builder value) {
      clearActualPickup();
      actual_pickupBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'actual_pickup' field has an active Builder instance
     * @return True if the 'actual_pickup' field has an active Builder instance
     */
    public boolean hasActualPickupBuilder() {
      return actual_pickupBuilder != null;
    }

    /**
      * Clears the value of the 'actual_pickup' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder clearActualPickup() {
      actual_pickup = null;
      actual_pickupBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'actual_drop' field.
      * @return The value.
      */
    public com.pickme.events.trip.trip_completed.ActualDrop getActualDrop() {
      return actual_drop;
    }

    /**
      * Sets the value of the 'actual_drop' field.
      * @param value The value of 'actual_drop'.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder setActualDrop(com.pickme.events.trip.trip_completed.ActualDrop value) {
      validate(fields()[10], value);
      this.actual_dropBuilder = null;
      this.actual_drop = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'actual_drop' field has been set.
      * @return True if the 'actual_drop' field has been set, false otherwise.
      */
    public boolean hasActualDrop() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'actual_drop' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_completed.ActualDrop.Builder getActualDropBuilder() {
      if (actual_dropBuilder == null) {
        if (hasActualDrop()) {
          setActualDropBuilder(com.pickme.events.trip.trip_completed.ActualDrop.newBuilder(actual_drop));
        } else {
          setActualDropBuilder(com.pickme.events.trip.trip_completed.ActualDrop.newBuilder());
        }
      }
      return actual_dropBuilder;
    }

    /**
     * Sets the Builder instance for the 'actual_drop' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.pickme.events.trip.trip_completed.Trip.Builder setActualDropBuilder(com.pickme.events.trip.trip_completed.ActualDrop.Builder value) {
      clearActualDrop();
      actual_dropBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'actual_drop' field has an active Builder instance
     * @return True if the 'actual_drop' field has an active Builder instance
     */
    public boolean hasActualDropBuilder() {
      return actual_dropBuilder != null;
    }

    /**
      * Clears the value of the 'actual_drop' field.
      * @return This builder.
      */
    public com.pickme.events.trip.trip_completed.Trip.Builder clearActualDrop() {
      actual_drop = null;
      actual_dropBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Trip build() {
      try {
        Trip record = new Trip();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.booked_by = fieldSetFlags()[1] ? this.booked_by : (java.lang.Integer) defaultValue(fields()[1]);
        record.distance = fieldSetFlags()[2] ? this.distance : (java.lang.Integer) defaultValue(fields()[2]);
        record.trip_cost = fieldSetFlags()[3] ? this.trip_cost : (java.lang.Float) defaultValue(fields()[3]);
        if (flagsBuilder != null) {
          record.flags = this.flagsBuilder.build();
        } else {
          record.flags = fieldSetFlags()[4] ? this.flags : (com.pickme.events.trip.trip_completed.Flags) defaultValue(fields()[4]);
        }
        record.payment = fieldSetFlags()[5] ? this.payment : (java.util.List<com.pickme.events.trip.trip_completed.Payment>) defaultValue(fields()[5]);
        record.discount = fieldSetFlags()[6] ? this.discount : (java.lang.Float) defaultValue(fields()[6]);
        record.promo_code = fieldSetFlags()[7] ? this.promo_code : (java.lang.CharSequence) defaultValue(fields()[7]);
        if (corporateBuilder != null) {
          record.corporate = this.corporateBuilder.build();
        } else {
          record.corporate = fieldSetFlags()[8] ? this.corporate : (com.pickme.events.trip.trip_completed.Corporate) defaultValue(fields()[8]);
        }
        if (actual_pickupBuilder != null) {
          record.actual_pickup = this.actual_pickupBuilder.build();
        } else {
          record.actual_pickup = fieldSetFlags()[9] ? this.actual_pickup : (com.pickme.events.trip.trip_completed.ActualPickup) defaultValue(fields()[9]);
        }
        if (actual_dropBuilder != null) {
          record.actual_drop = this.actual_dropBuilder.build();
        } else {
          record.actual_drop = fieldSetFlags()[10] ? this.actual_drop : (com.pickme.events.trip.trip_completed.ActualDrop) defaultValue(fields()[10]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Trip>
    WRITER$ = (org.apache.avro.io.DatumWriter<Trip>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Trip>
    READER$ = (org.apache.avro.io.DatumReader<Trip>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pickme.events.driver.driver_location_changed;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Location extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2159546740833763056L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"com.pickme.events.driver.driver_location_changed\",\"fields\":[{\"name\":\"lat\",\"type\":\"float\"},{\"name\":\"lng\",\"type\":\"float\"},{\"name\":\"accuracy\",\"type\":\"float\"},{\"name\":\"speed\",\"type\":\"float\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"bearing\",\"type\":\"float\",\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Location> ENCODER =
      new BinaryMessageEncoder<Location>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Location> DECODER =
      new BinaryMessageDecoder<Location>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Location> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Location> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Location>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Location to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Location from a ByteBuffer. */
  public static Location fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public float lat;
  @Deprecated public float lng;
  @Deprecated public float accuracy;
  @Deprecated public float speed;
  @Deprecated public long timestamp;
  @Deprecated public float bearing;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Location() {}

  /**
   * All-args constructor.
   * @param lat The new value for lat
   * @param lng The new value for lng
   * @param accuracy The new value for accuracy
   * @param speed The new value for speed
   * @param timestamp The new value for timestamp
   * @param bearing The new value for bearing
   */
  public Location(java.lang.Float lat, java.lang.Float lng, java.lang.Float accuracy, java.lang.Float speed, java.lang.Long timestamp, java.lang.Float bearing) {
    this.lat = lat;
    this.lng = lng;
    this.accuracy = accuracy;
    this.speed = speed;
    this.timestamp = timestamp;
    this.bearing = bearing;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return lat;
    case 1: return lng;
    case 2: return accuracy;
    case 3: return speed;
    case 4: return timestamp;
    case 5: return bearing;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: lat = (java.lang.Float)value$; break;
    case 1: lng = (java.lang.Float)value$; break;
    case 2: accuracy = (java.lang.Float)value$; break;
    case 3: speed = (java.lang.Float)value$; break;
    case 4: timestamp = (java.lang.Long)value$; break;
    case 5: bearing = (java.lang.Float)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'lat' field.
   * @return The value of the 'lat' field.
   */
  public java.lang.Float getLat() {
    return lat;
  }

  /**
   * Sets the value of the 'lat' field.
   * @param value the value to set.
   */
  public void setLat(java.lang.Float value) {
    this.lat = value;
  }

  /**
   * Gets the value of the 'lng' field.
   * @return The value of the 'lng' field.
   */
  public java.lang.Float getLng() {
    return lng;
  }

  /**
   * Sets the value of the 'lng' field.
   * @param value the value to set.
   */
  public void setLng(java.lang.Float value) {
    this.lng = value;
  }

  /**
   * Gets the value of the 'accuracy' field.
   * @return The value of the 'accuracy' field.
   */
  public java.lang.Float getAccuracy() {
    return accuracy;
  }

  /**
   * Sets the value of the 'accuracy' field.
   * @param value the value to set.
   */
  public void setAccuracy(java.lang.Float value) {
    this.accuracy = value;
  }

  /**
   * Gets the value of the 'speed' field.
   * @return The value of the 'speed' field.
   */
  public java.lang.Float getSpeed() {
    return speed;
  }

  /**
   * Sets the value of the 'speed' field.
   * @param value the value to set.
   */
  public void setSpeed(java.lang.Float value) {
    this.speed = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'bearing' field.
   * @return The value of the 'bearing' field.
   */
  public java.lang.Float getBearing() {
    return bearing;
  }

  /**
   * Sets the value of the 'bearing' field.
   * @param value the value to set.
   */
  public void setBearing(java.lang.Float value) {
    this.bearing = value;
  }

  /**
   * Creates a new Location RecordBuilder.
   * @return A new Location RecordBuilder
   */
  public static com.pickme.events.driver.driver_location_changed.Location.Builder newBuilder() {
    return new com.pickme.events.driver.driver_location_changed.Location.Builder();
  }

  /**
   * Creates a new Location RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Location RecordBuilder
   */
  public static com.pickme.events.driver.driver_location_changed.Location.Builder newBuilder(com.pickme.events.driver.driver_location_changed.Location.Builder other) {
    return new com.pickme.events.driver.driver_location_changed.Location.Builder(other);
  }

  /**
   * Creates a new Location RecordBuilder by copying an existing Location instance.
   * @param other The existing instance to copy.
   * @return A new Location RecordBuilder
   */
  public static com.pickme.events.driver.driver_location_changed.Location.Builder newBuilder(com.pickme.events.driver.driver_location_changed.Location other) {
    return new com.pickme.events.driver.driver_location_changed.Location.Builder(other);
  }

  /**
   * RecordBuilder for Location instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Location>
    implements org.apache.avro.data.RecordBuilder<Location> {

    private float lat;
    private float lng;
    private float accuracy;
    private float speed;
    private long timestamp;
    private float bearing;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pickme.events.driver.driver_location_changed.Location.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.lat)) {
        this.lat = data().deepCopy(fields()[0].schema(), other.lat);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lng)) {
        this.lng = data().deepCopy(fields()[1].schema(), other.lng);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accuracy)) {
        this.accuracy = data().deepCopy(fields()[2].schema(), other.accuracy);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.speed)) {
        this.speed = data().deepCopy(fields()[3].schema(), other.speed);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bearing)) {
        this.bearing = data().deepCopy(fields()[5].schema(), other.bearing);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Location instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pickme.events.driver.driver_location_changed.Location other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.lat)) {
        this.lat = data().deepCopy(fields()[0].schema(), other.lat);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lng)) {
        this.lng = data().deepCopy(fields()[1].schema(), other.lng);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accuracy)) {
        this.accuracy = data().deepCopy(fields()[2].schema(), other.accuracy);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.speed)) {
        this.speed = data().deepCopy(fields()[3].schema(), other.speed);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.bearing)) {
        this.bearing = data().deepCopy(fields()[5].schema(), other.bearing);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'lat' field.
      * @return The value.
      */
    public java.lang.Float getLat() {
      return lat;
    }

    /**
      * Sets the value of the 'lat' field.
      * @param value The value of 'lat'.
      * @return This builder.
      */
    public com.pickme.events.driver.driver_location_changed.Location.Builder setLat(float value) {
      validate(fields()[0], value);
      this.lat = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'lat' field has been set.
      * @return True if the 'lat' field has been set, false otherwise.
      */
    public boolean hasLat() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'lat' field.
      * @return This builder.
      */
    public com.pickme.events.driver.driver_location_changed.Location.Builder clearLat() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lng' field.
      * @return The value.
      */
    public java.lang.Float getLng() {
      return lng;
    }

    /**
      * Sets the value of the 'lng' field.
      * @param value The value of 'lng'.
      * @return This builder.
      */
    public com.pickme.events.driver.driver_location_changed.Location.Builder setLng(float value) {
      validate(fields()[1], value);
      this.lng = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lng' field has been set.
      * @return True if the 'lng' field has been set, false otherwise.
      */
    public boolean hasLng() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lng' field.
      * @return This builder.
      */
    public com.pickme.events.driver.driver_location_changed.Location.Builder clearLng() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'accuracy' field.
      * @return The value.
      */
    public java.lang.Float getAccuracy() {
      return accuracy;
    }

    /**
      * Sets the value of the 'accuracy' field.
      * @param value The value of 'accuracy'.
      * @return This builder.
      */
    public com.pickme.events.driver.driver_location_changed.Location.Builder setAccuracy(float value) {
      validate(fields()[2], value);
      this.accuracy = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'accuracy' field has been set.
      * @return True if the 'accuracy' field has been set, false otherwise.
      */
    public boolean hasAccuracy() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'accuracy' field.
      * @return This builder.
      */
    public com.pickme.events.driver.driver_location_changed.Location.Builder clearAccuracy() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'speed' field.
      * @return The value.
      */
    public java.lang.Float getSpeed() {
      return speed;
    }

    /**
      * Sets the value of the 'speed' field.
      * @param value The value of 'speed'.
      * @return This builder.
      */
    public com.pickme.events.driver.driver_location_changed.Location.Builder setSpeed(float value) {
      validate(fields()[3], value);
      this.speed = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'speed' field has been set.
      * @return True if the 'speed' field has been set, false otherwise.
      */
    public boolean hasSpeed() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'speed' field.
      * @return This builder.
      */
    public com.pickme.events.driver.driver_location_changed.Location.Builder clearSpeed() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.pickme.events.driver.driver_location_changed.Location.Builder setTimestamp(long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.pickme.events.driver.driver_location_changed.Location.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'bearing' field.
      * @return The value.
      */
    public java.lang.Float getBearing() {
      return bearing;
    }

    /**
      * Sets the value of the 'bearing' field.
      * @param value The value of 'bearing'.
      * @return This builder.
      */
    public com.pickme.events.driver.driver_location_changed.Location.Builder setBearing(float value) {
      validate(fields()[5], value);
      this.bearing = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'bearing' field has been set.
      * @return True if the 'bearing' field has been set, false otherwise.
      */
    public boolean hasBearing() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'bearing' field.
      * @return This builder.
      */
    public com.pickme.events.driver.driver_location_changed.Location.Builder clearBearing() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Location build() {
      try {
        Location record = new Location();
        record.lat = fieldSetFlags()[0] ? this.lat : (java.lang.Float) defaultValue(fields()[0]);
        record.lng = fieldSetFlags()[1] ? this.lng : (java.lang.Float) defaultValue(fields()[1]);
        record.accuracy = fieldSetFlags()[2] ? this.accuracy : (java.lang.Float) defaultValue(fields()[2]);
        record.speed = fieldSetFlags()[3] ? this.speed : (java.lang.Float) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.Long) defaultValue(fields()[4]);
        record.bearing = fieldSetFlags()[5] ? this.bearing : (java.lang.Float) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Location>
    WRITER$ = (org.apache.avro.io.DatumWriter<Location>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Location>
    READER$ = (org.apache.avro.io.DatumReader<Location>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
